<?xml version="1.0" encoding="utf-8" ?>
<!--
    Copyright (C) 2011  p12 <tir5c3@yahoo.co.uk>

    This file is part of cppreference-doc
    
    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see http://www.gnu.org/licenses/.
-->

<!--
    structure:

    /index/const        defines a macro/constant/enum value
    /index/function     defines a global function
    /index/class        defines a class
    /index/enum         defines an enum

        "name" attribute: name of the identifier (with the namespace prefix)
        "link" attribute: link relative to the wiki root
        "since" attribute: (optional) "c++11" or none

    //class/const       defines a macro/member constant/member enum value
    //enum/const        defines an enum class value (only in c++11)
    //class/function    defines a member function
    //class/class       defines a member class
    //class/enum        defines a member enum
    
        "name" attribute: name of the function/class (without the parent class/namespace prefix)
        "link" attribute: (optional) link relative to the parent class
                          by default equals to 'name'
                          if set to "." the resulting link targets to the page of the parent class

        "since" attribute: (optional) "c++11" or none

    //class/constructor

        defines a constructor. Equivalent to <function name="@@@"/> where @@@ is the name of the
        parent class without the namespace prefix

    //class/destructor

        defines a destructor. Equivalent to <function name="~@@@"/> where @@@ is the name of the
        parent class without the namespace prefix

    /index/typedef      defines a typedef

        "name" attribute: name of the identifier (with the namespace prefix)
        "link" attribute: link relative to the wiki root
        "alias" attribute: name of the identifier whose contents to import.
                           Allowed identifiers: '/index/class' and '/index/enum'
        "since" attribute: (optional) "c++11" or none
        "alias" and "link" attributes are incompatible
      
    //class/typedef     defines a member typedef
    
        "name" attribute: name of the identifier (with the namespace prefix)
        "link" attribute: link relative to the wiki root
        "alias" attribute: name of the identifier whose contents to import
                           Allowed identifiers: '/index/class' and '/index/enum'
        "since" attribute: (optional) "c++11" or none
        "alias" and "link" attributes are incompatible

    //class/inherits

        imports all class and function members of another class.

        "name" attribute: name of the identifier whose contents to import.
                          Allowed identifiers: '/index/class' and '/index/enum'


    Note: replace spaces in all links with '_'
    Note: currently the alias attributes is not handled by the XSLT scripts
    Todo: check whether each of the exception classes have operator= defined or not
    Todo: add pseudo-random number generators and distributions
    Todo: add non-member functions, e.g. std::swap overloads
-->
<index>

    <!--=======================================================================-->
    <!-- cpp/types -->
        
        <!-- generic types -->
        
    <typedef name="std::size_t" link="cpp/types/size_t"/>
    <typedef name="std::ptrdiff_t" link="cpp/types/ptrdiff_t"/>
    <typedef name="std::nullptr_t" link="cpp/types/nullptr_t"/>
    <const name="NULL" link="cpp/types/NULL"/>
    <typedef name="std::max_align_t" link="cpp/types/max_align_t"/>
    <function name="offsetof" link="cpp/types/offsetof"/>
    
        <!-- fixed width integer types -->
        
    <typedef name="int8_t" link="cpp/types/integer"/>
    <typedef name="int16_t" link="cpp/types/integer"/>
    <typedef name="int32_t" link="cpp/types/integer"/>
    <typedef name="int64_t" link="cpp/types/integer"/>
    <typedef name="int_fast8_t" link="cpp/types/integer"/>
    <typedef name="int_fast16_t" link="cpp/types/integer"/>
    <typedef name="int_fast32_t" link="cpp/types/integer"/>
    <typedef name="int_fast64_t" link="cpp/types/integer"/>
    <typedef name="int_least8_t" link="cpp/types/integer"/>
    <typedef name="int_least16_t" link="cpp/types/integer"/>
    <typedef name="int_least32_t" link="cpp/types/integer"/>
    <typedef name="int_least64_t" link="cpp/types/integer"/>
    <typedef name="intmax_t" link="cpp/types/integer"/>
    <typedef name="intptr_t" link="cpp/types/integer"/>
    
    <typedef name="uint8_t" link="cpp/types/integer"/>
    <typedef name="uint16_t" link="cpp/types/integer"/>
    <typedef name="uint32_t" link="cpp/types/integer"/>
    <typedef name="uint64_t" link="cpp/types/integer"/>
    <typedef name="uint_fast8_t" link="cpp/types/integer"/>
    <typedef name="uint_fast16_t" link="cpp/types/integer"/>
    <typedef name="uint_fast32_t" link="cpp/types/integer"/>
    <typedef name="uint_fast64_t" link="cpp/types/integer"/>
    <typedef name="uint_least8_t" link="cpp/types/integer"/>
    <typedef name="uint_least16_t" link="cpp/types/integer"/>
    <typedef name="uint_least32_t" link="cpp/types/integer"/>
    <typedef name="uint_least64_t" link="cpp/types/integer"/>
    <typedef name="uintmax_t" link="cpp/types/integer"/>
    <typedef name="uintptr_t" link="cpp/types/integer"/>
    
    <const name="INT8_MIN" link="cpp/types/integer"/>
    <const name="INT16_MIN" link="cpp/types/integer"/>
    <const name="INT32_MIN" link="cpp/types/integer"/>
    <const name="INT64_MIN" link="cpp/types/integer"/>
    <const name="INT_FAST8_MIN" link="cpp/types/integer"/>
    <const name="INT_FAST16_MIN" link="cpp/types/integer"/>
    <const name="INT_FAST32_MIN" link="cpp/types/integer"/>
    <const name="INT_FAST64_MIN" link="cpp/types/integer"/>
    <const name="INT_LEAST8_MIN" link="cpp/types/integer"/>
    <const name="INT_LEAST16_MIN" link="cpp/types/integer"/>
    <const name="INT_LEAST32_MIN" link="cpp/types/integer"/>
    <const name="INT_LEAST64_MIN" link="cpp/types/integer"/>
    <const name="INTPTR_MIN" link="cpp/types/integer"/>
    <const name="INTMAX_MIN" link="cpp/types/integer"/>
    
    <const name="INT8_MAX" link="cpp/types/integer"/>
    <const name="INT16_MAX" link="cpp/types/integer"/>
    <const name="INT32_MAX" link="cpp/types/integer"/>
    <const name="INT64_MAX" link="cpp/types/integer"/>
    <const name="INT_FAST8_MAX" link="cpp/types/integer"/>
    <const name="INT_FAST16_MAX" link="cpp/types/integer"/>
    <const name="INT_FAST32_MAX" link="cpp/types/integer"/>
    <const name="INT_FAST64_MAX" link="cpp/types/integer"/>
    <const name="INT_LEAST8_MAX" link="cpp/types/integer"/>
    <const name="INT_LEAST16_MAX" link="cpp/types/integer"/>
    <const name="INT_LEAST32_MAX" link="cpp/types/integer"/>
    <const name="INT_LEAST64_MAX" link="cpp/types/integer"/>
    <const name="INTPTR_MAX" link="cpp/types/integer"/>
    <const name="INTMAX_MAX" link="cpp/types/integer"/>
    
    <const name="UINT8_MAX" link="cpp/types/integer"/>
    <const name="UINT16_MAX" link="cpp/types/integer"/>
    <const name="UINT32_MAX" link="cpp/types/integer"/>
    <const name="UINT64_MAX" link="cpp/types/integer"/>
    <const name="UINT_FAST8_MAX" link="cpp/types/integer"/>
    <const name="UINT_FAST16_MAX" link="cpp/types/integer"/>
    <const name="UINT_FAST32_MAX" link="cpp/types/integer"/>
    <const name="UINT_FAST64_MAX" link="cpp/types/integer"/>
    <const name="UINT_LEAST8_MAX" link="cpp/types/integer"/>
    <const name="UINT_LEAST16_MAX" link="cpp/types/integer"/>
    <const name="UINT_LEAST32_MAX" link="cpp/types/integer"/>
    <const name="UINT_LEAST64_MAX" link="cpp/types/integer"/>
    <const name="UINTPTR_MAX" link="cpp/types/integer"/>
    <const name="UINTMAX_MAX" link="cpp/types/integer"/>
    
    <!-- todo: add format macro specifiers -->
    
        <!-- cpp/types/numeric_limits -->
    
    <class name="std::numeric_limits" link="cpp/types/numeric_limits" type="template">
        <const name="is_specialized"/>
        <const name="is_signed"/>
        <const name="is_integer"/>
        <const name="is_exact"/>
        
        <const name="has_infinity"/>
        <const name="has_quiet_NaN"/>
        <const name="has_signaling_NaN"/>
        <const name="has_denorm"/>
        <const name="has_denorm_loss"/>

        <const name="round_style"/>

        <const name="is_iec559"/>
        <const name="is_bounded"/>
        <const name="is_modulo"/>
        
        <const name="digits"/>
        <const name="digits10"/>
        <const name="max_digits10"/>
        
        <const name="radix"/>
        <const name="min_exponent"/>
        <const name="min_exponent10"/>
        <const name="max_exponent"/>
        <const name="max_exponent10"/>
        <const name="traps"/>
        <const name="tinyness_before"/>
        
        <function name="min"/>
        <function name="max"/>
        <function name="lowest"/>
        <function name="epsilon"/>
        <function name="round_error"/>
        <function name="infinity"/>
        <function name="quiet_NaN"/>
        <function name="signaling_NaN"/>
        <function name="denorm_min"/>
    </class>

    <enum name="std::float_round_style" link="cpp/types/numeric_limits/float_round_style"/>
    <const name="std::round_indeterminate" link="cpp/types/numeric_limits/float_round_style"/>
    <const name="std::round_toward_zero" link="cpp/types/numeric_limits/float_round_style"/>
    <const name="std::round_to_nearest" link="cpp/types/numeric_limits/float_round_style"/>
    <const name="std::round_toward_infinity" link="cpp/types/numeric_limits/float_round_style"/>
    <const name="std::round_toward_neg_infinity" link="cpp/types/numeric_limits/float_round_style"/>
    
    <enum name="std::float_denorm_style" link="cpp/types/numeric_limits/float_denorm_style"/>
    <const name="std::denorm_indeterminate" link="cpp/types/numeric_limits/float_denorm_style"/>
    <const name="std::denorm_absent" link="cpp/types/numeric_limits/float_denorm_style"/>
    <const name="std::denorm_present" link="cpp/types/numeric_limits/float_denorm_style"/>

        <!-- cpp/types/climits -->
    <const name="PTRDIFF_MIN" link="cpp/types/climits"/>
    <const name="PTRDIFF_MAX" link="cpp/types/climits"/>
    <const name="SIZE_MAX" link="cpp/types/climits"/>
    <const name="SIG_ATOMIC_MIN" link="cpp/types/climits"/>
    <const name="SIG_ATOMIC_MAX" link="cpp/types/climits"/>
    <const name="WCHAR_MIN" link="cpp/types/climits"/>
    <const name="WCHAR_MAX" link="cpp/types/climits"/>
    <const name="WINT_MIN" link="cpp/types/climits"/>
    <const name="WINT_MAX" link="cpp/types/climits"/>
    
    <const name="CHAR_BIT" link="cpp/types/climits"/>
    <const name="MB_LEN_MAX" link="cpp/types/climits"/>
    <const name="CHAR_MIN" link="cpp/types/climits"/>
    <const name="CHAR_MAX" link="cpp/types/climits"/>
    
    <const name="SCHAR_MIN" link="cpp/types/climits"/>
    <const name="SHRT_MIN" link="cpp/types/climits"/>
    <const name="INT_MIN" link="cpp/types/climits"/>
    <const name="LONG_MIN" link="cpp/types/climits"/>
    <const name="LLONG_MIN" link="cpp/types/climits"/>
    
    <const name="SCHAR_MAX" link="cpp/types/climits"/>
    <const name="SHRT_MAX" link="cpp/types/climits"/>
    <const name="INT_MAX" link="cpp/types/climits"/>
    <const name="LONG_MAX" link="cpp/types/climits"/>
    <const name="LLONG_MAX" link="cpp/types/climits"/>

    <const name="UCHAR_MAX" link="cpp/types/climits"/>
    <const name="USHRT_MAX" link="cpp/types/climits"/>
    <const name="UINT_MAX" link="cpp/types/climits"/>
    <const name="ULONG_MAX" link="cpp/types/climits"/>
    <const name="ULLONG_MAX" link="cpp/types/climits"/>
    
    <const name="FLT_RADIX" link="cpp/types/climits"/>
    <const name="DECIMAL_DIG" link="cpp/types/climits"/>
    
    <const name="FLT_MIN" link="cpp/types/climits"/>
    <const name="DBL_MIN" link="cpp/types/climits"/>
    <const name="LDBL_MIN" link="cpp/types/climits"/>
    
    <const name="FLT_MAX" link="cpp/types/climits"/>
    <const name="DBL_MAX" link="cpp/types/climits"/>
    <const name="LDBL_MAX" link="cpp/types/climits"/>
    
    <const name="FLT_EPSILON" link="cpp/types/climits"/>
    <const name="DBL_EPSILON" link="cpp/types/climits"/>
    <const name="LDBL_EPSILON" link="cpp/types/climits"/>
    
    <const name="FLT_DIG" link="cpp/types/climits"/>
    <const name="DBL_DIG" link="cpp/types/climits"/>
    <const name="LDBL_DIG" link="cpp/types/climits"/>
    
    <const name="FLT_MANT_DIG" link="cpp/types/climits"/>
    <const name="DBL_MANT_DIG" link="cpp/types/climits"/>
    <const name="LDBL_MANT_DIG" link="cpp/types/climits"/>
    
    <const name="FLT_MIN_EXP" link="cpp/types/climits"/>
    <const name="DBL_MIN_EXP" link="cpp/types/climits"/>
    <const name="LDBL_MIN_EXP" link="cpp/types/climits"/>
    
    <const name="FLT_MIN_10_EXP" link="cpp/types/climits"/>
    <const name="DBL_MIN_10_EXP" link="cpp/types/climits"/>
    <const name="LDBL_MIN_10_EXP" link="cpp/types/climits"/>
   
    <const name="FLT_MAX_EXP" link="cpp/types/climits"/>
    <const name="DBL_MAX_EXP" link="cpp/types/climits"/>
    <const name="LDBL_MAX_EXP" link="cpp/types/climits"/>
    
    <const name="FLT_MAX_10_EXP" link="cpp/types/climits"/>
    <const name="DBL_MAX_10_EXP" link="cpp/types/climits"/>
    <const name="LDBL_MAX_10_EXP" link="cpp/types/climits"/>
    
    <const name="FLT_ROUNDS" link="cpp/types/climits"/>
    <const name="FLT_EVAL_METHOD" link="cpp/types/climits"/>
        
        <!-- RTTI -->
        
    <class name="std::type_info" link="cpp/types/type_info">
        <function name="operator==" link="operator_cmp"/>
        <function name="operator!=" link="operator_cmp"/>
        <function name="before"/>
        <function name="hash_code"/>
        <function name="name"/>
    </class>

    <class name="std::type_index" link="cpp/types/type_index">
        <constructor/>
        <function name="operator==" link="operator_cmp"/>
        <function name="operator!=" link="operator_cmp"/>
        <function name="operator&lt;=" link="operator_cmp"/>
        <function name="operator&lt;" link="operator_cmp"/>
        <function name="operator&gt;=" link="operator_cmp"/>
        <function name="operator&gt;" link="operator_cmp"/>
        <function name="hash_code"/>
        <function name="name"/>
    </class>
    
    <class name="std::bad_typeid" link="cpp/types/bad_typeid">
        <inherits name="std::exception"/>
        <constructor/>
    </class>
    
    <class name="std::bad_cast" link="cpp/types/bad_cast">
        <inherits name="std::exception"/>
        <constructor/>
    </class>
    
        <!-- type traits --> 
        
    <class name="std::is_void" link="cpp/types/is_void"/>
    <class name="std::is_integral" link="cpp/types/is_integral"/>
    <class name="std::is_floating_point" link="cpp/types/is_floating_point"/>
    <class name="std::is_array" link="cpp/types/is_array"/>
    <class name="std::is_pointer" link="cpp/types/is_pointer"/>
    <class name="std::is_lvalue_reference" link="cpp/types/is_lvalue_reference"/>
    <class name="std::is_rvalue_reference" link="cpp/types/is_rvalue_reference"/>
    <class name="std::is_member_object_pointer" link="cpp/types/is_member_object_pointer"/>
    <class name="std::is_member_function_pointer" link="cpp/types/is_member_function_pointer"/>
    <class name="std::is_enum" link="cpp/types/is_enum"/>
    <class name="std::is_union" link="cpp/types/is_union"/>
    <class name="std::is_class" link="cpp/types/is_class"/>
    <class name="std::is_function" link="cpp/types/is_function"/>
    
    <class name="std::is_reference" link="cpp/types/is_reference"/>
    <class name="std::is_arithmetic" link="cpp/types/is_arithmetic"/>
    <class name="std::is_fundamental" link="cpp/types/is_fundamental"/>
    <class name="std::is_object" link="cpp/types/is_object"/>
    <class name="std::is_scalar" link="cpp/types/is_scalar"/>
    <class name="std::is_compound" link="cpp/types/is_compound"/>
    <class name="std::is_member_pointer" link="cpp/types/is_member_pointer"/>
    
    <class name="std::is_const" link="cpp/types/is_const"/>
    <class name="std::is_volatile" link="cpp/types/is_volatile"/>
    <class name="std::is_trivial" link="cpp/types/is_trivial"/>
    <class name="std::is_trivially_copyable" link="cpp/types/is_trivially_copyable"/>
    <class name="std::is_standard_layout" link="cpp/types/is_standard_layout"/>
    <class name="std::is_pod" link="cpp/types/::is_pod"/>
    <class name="std::is_literal_type" link="cpp/types/is_literal_type"/>
    <class name="std::is_empty" link="cpp/types/is_empty"/>
    <class name="std::is_polymorphic" link="cpp/types/is_polymorphic"/>
    <class name="std::is_abstract" link="cpp/types/is_abstract"/>
    <class name="std::is_signed" link="cpp/types/is_signed"/>
    <class name="std::is_unsigned" link="cpp/types/is_unsigned"/>
    
    <class name="std::is_constructible" link="cpp/types/is_constructible"/>
    <class name="std::is_trivially_constructible" link="cpp/types/is_constructible"/>
    <class name="std::is_nothrow_constructible" link="cpp/types/is_constructible"/>
    <class name="std::is_default_constructible" link="cpp/types/is_default_constructible"/>
    <class name="std::is_trivially_default_constructible" link="cpp/types/is_default_constructible"/>
    <class name="std::is_nothrow_default_constructible" link="cpp/types/is_default_constructible"/>
    <class name="std::is_copy_constructible" link="cpp/types/is_copy_constructible"/>
    <class name="std::is_trivially_copy_constructible" link="cpp/types/is_copy_constructible"/>
    <class name="std::is_nothrow_copy_constructible" link="cpp/types/is_copy_constructible"/>
    <class name="std::is_move_constructible" link="cpp/types/is_move_constructible"/>
    <class name="std::is_trivially_move_constructible" link="cpp/types/is_move_constructible"/>
    <class name="std::is_nothrow_move_constructible" link="cpp/types/is_move_constructible"/>
    
    <class name="std::is_assignable" link="cpp/types/is_assignable"/>
    <class name="std::is_trivially_assignable" link="cpp/types/is_assignable"/>
    <class name="std::is_nothrow_assignable" link="cpp/types/is_assignable"/>
    <class name="std::is_copy_assignable" link="cpp/types/is_copy_assignable"/>
    <class name="std::is_trivially_copy_assignable" link="cpp/types/is_copy_assignable"/>
    <class name="std::is_nothrow_copy_assignable" link="cpp/types/is_copy_assignable"/>
    <class name="std::is_move_assignable" link="cpp/types/is_move_assignable"/>
    <class name="std::is_trivially_move_assignable" link="cpp/types/is_move_assignable"/>
    <class name="std::is_nothrow_move_assignable" link="cpp/types/is_move_assignable"/>
    <class name="std::is_destructible" link="cpp/types/is_destructible"/>
    <class name="std::is_trivially_destructible" link="cpp/types/is_destructible"/>
    <class name="std::is_nothrow_destructible" link="cpp/types/is_destructible"/>
    
    <class name="std::has_virtual_destructor" link="cpp/types/has_virtual_destructor"/>
    
    <class name="std::alignment_of" link="cpp/types/alignment_of"/>
    <class name="std::rank" link="cpp/types/rank"/>
    <class name="std::extent" link="cpp/types/extent"/>
    
    <class name="std::is_same" link="cpp/types/is_same"/>
    <class name="std::is_base_of" link="cpp/types/is_base_of"/>
    <class name="std::is_convertible" link="cpp/types/is_convertible"/>
    
    <class name="std::remove_cv" link="cpp/types/remove_cv"/>
    <class name="std::remove_const" link="cpp/types/remove_cv"/>
    <class name="std::remove_volatile" link="cpp/types/remove_cv"/>
    <class name="std::add_cv" link="cpp/types/add_cv"/>
    <class name="std::add_const" link="cpp/types/add_cv"/>
    <class name="std::add_volatile" link="cpp/types/add_cv"/>
    
    <class name="std::remove_reference" link="cpp/types/remove_reference"/>
    <class name="std::add_lvalue_reference" link="cpp/types/add_reference"/>
    <class name="std::add_rvalue_reference" link="cpp/types/add_reference"/>
    
    <class name="std::remove_pointer" link="cpp/types/remove_pointer"/>
    <class name="std::add_pointer" link="cpp/types/add_pointer"/>
    
    <class name="std::make_signed" link="cpp/types/make_signed"/>
    <class name="std::make_unsigned" link="cpp/types/make_unsigned"/>
    
    <class name="std::remove_extent" link="cpp/types/remove_extent"/>
    <class name="std::remove_all_extents" link="cpp/types/remove_all_extents"/>
    
    <class name="std::aligned_storage" link="cpp/types/aligned_storage"/>
    <class name="std::aligned_union" link="cpp/types/aligned_union"/>
    <class name="std::decay" link="cpp/types/decay"/>
    <class name="std::enable_if" link="cpp/types/enable_if"/>
    <class name="std::conditional" link="cpp/types/conditional"/>
    <class name="std::common_type" link="cpp/types/common_type"/>
    <class name="std::underlying_type" link="cpp/types/underlying_type"/>
    <class name="std::result_of" link="cpp/types/result_of"/>
    <class name="std::integral_constant" link="cpp/types/integral_constant"/>
    <typedef name="std::true_type" alias="std::integral_constant"/>
    <typedef name="std::false_type" alias="std::integral_constant"/>

    <!--=======================================================================-->
    <!-- cpp/utility/memory -->
    
        <!-- low level stuff -->
        
    <function name="operator new" link="cpp/memory/new/operator_new"/>
    <function name="operator new[]" link="cpp/memory/new/operator_new"/>
    <function name="operator delete" link="cpp/memory/new/operator_delete"/>
    <function name="operator delete[]" link="cpp/memory/new/operator_delete"/>
    
    <function name="std::get_new_handler" link="cpp/memory/new/get_new_handler"/>
    <function name="std::set_new_handler" link="cpp/memory/new/set_new_handler"/>
    
    <class name="std::bad_alloc" link="cpp/memory/new/bad_alloc">
        <inherits name="std::exception"/>
        <constructor/>
    </class>
    
    <class name="std::bad_array_new_length" link="cpp/memory/new/bad_array_new_length">
        <inherits name="std::bad_alloc"/>
        <constructor/>
    </class>

    <class name="std::nothrow_t" link="cpp/memory/new/nothrow_t"/>
    <typedef name="std::new_handler" link="cpp/memory/new/new_handler"/>

    <const name="std::nothrow" link="cpp/memory/new/nothrow"/>

        <!-- high level stuff -->
        
    <class name="std::allocator" link="cpp/memory/allocator">
        <constructor/>
        <destructor/>
        <function name="operator==" link="operator_cmp"/>
        <function name="operator!=" link="operator_cmp"/>
        <function name="address"/>
        <function name="allocate"/>
        <function name="deallocate"/>
        <function name="max_size"/>
        <function name="construct"/>
        <function name="destroy"/>
    </class>
    
    <class name="std::allocator_traits" link="cpp/memory/allocator_traits">
        <function name="allocate"/>
        <function name="deallocate"/>
        <function name="max_size"/>
        <function name="construct"/>
        <function name="destroy"/>
        <function name="select_on_container_copy_construction"/>
    </class>

    <class name="std::allocator_arg_t" link="cpp/memory/allocator_arg_t"/>
    <const name="std::allocator_arg" link="cpp/memory/allocator_arg"/>
    
    <class name="std::uses_allocator" link="cpp/memory/uses_allocator"/>
    
    <class name="std::scoped_allocator_adaptor" link="cpp/memory/scoped_allocator_adaptor">
        <constructor/>
        <destructor/>
        <function name="operator==" link="operator_cmp"/>
        <function name="operator!=" link="operator_cmp"/>
        <function name="inner_allocator"/>
        <function name="outer_allocator"/>
        <function name="allocate"/>
        <function name="deallocate"/>
        <function name="max_size"/>
        <function name="construct"/>
        <function name="destroy"/>
        <function name="select_on_container_copy_construction"/>
    </class>

    <function name="std::uninitialized_copy" link="cpp/memory/uninitialized_copy"/>
    <function name="std::uninitialized_copy_n" link="cpp/memory/uninitialized_copy_n"/>
    <function name="std::uninitialized_fill" link="cpp/memory/uninitialized_fill"/>
    <function name="std::uninitialized_fill_n" link="cpp/memory/uninitialized_fill_n"/>
    
    <class name="std::raw_storage_iterator" link="cpp/memory/raw_storage_iterator">
        <constructor/>
        <function name="operator*"/>
        <function name="operator="/>
        <function name="operator++"/>
    </class>
    
    <function name="std::get_temporary_buffer" link="cpp/memory/get_temporary_buffer"/>
    <function name="std::return_temporary_buffer" link="cpp/memory/return_temporary_buffer"/>
    
    <class name="std::unique_ptr" link="cpp/memory/unique_ptr">
        <constructor/>
        <destructor/>
        <function name="operator="/>
        <function name="release"/>
        <function name="reset"/>
        <function name="swap"/>
        <function name="get"/>
        <function name="get_deleter"/>
        <function name="operator*"/>
        <function name="operator->" link="operator*"/>
        <function name="operator bool"/>
    </class>

    <class name="std::default_delete" link="cpp/memory/default_delete">
        <constructor/>
        <function name="operator()"/>
    </class>

    <class name="std::shared_ptr" link="cpp/memory/shared_ptr">
        <constructor/>
        <destructor/>
        <function name="operator="/>
        <function name="reset"/>
        <function name="swap"/>
        <function name="get"/>
        <function name="operator*"/>
        <function name="operator->" link="operator*"/>
        <function name="unique"/>
        <function name="operator bool"/>
        <function name="owner_before"/>
    </class>

    <class name="std::weak_ptr" link="cpp/memory/weak_ptr">
        <constructor/>
        <destructor/>
        <function name="operator="/>
        <function name="reset"/>
        <function name="swap"/>
        <function name="uset_count"/>
        <function name="expired"/>
        <function name="lock"/>
        <function name="owner_before"/>
    </class>
    
    <class name="std::enable_shared_from_this" link="cpp/memory/enable_shared_from_this">
        <constructor/>
        <destructor/>
        <function name="operator="/>
        <function name="shared_from_this"/>
    </class>
    
    <class name="std::bad_weak_ptr" link="cpp/memory/bad_weak_ptr"><!--todo--></class>
    
    <class name="std::auto_ptr" link="cpp/memory/auto_ptr">
        <constructor/>
        <destructor/>
        <function name="operator="/>
        <function name="reset"/>
        <function name="release"/>
        <function name="get"/>
        <function name="operator*"/>
        <function name="operator->" link="operator*"/>
    </class>

    <function name="std::declare_reachable" link="cpp/memory/gc/declare_reachable"/>
    <function name="std::undeclare_reachable" link="cpp/memory/gc/undeclare_reachable"/>
    <function name="std::declare_no_pointers" link="cpp/memory/gc/declare_no_pointers"/>
    <function name="std::undeclare_no_pointers" link="cpp/memory/gc/undeclare_no_pointers"/>
    
    <class name="std::pointer_safety" link="cpp/memory/gc/pointer_safety">
        <const name="relaxed" link="."/>
        <const name="preferred" link="."/>
        <const name="strict" link="."/>
    </class>
    <function name="std::get_pointer_safety" link="cpp/memory/gc/get_pointer_safety"/>

    <class name="std::pointer_traits" link="cpp/memory/pointer_traits">
        <function name="pointer_to"/>
    </class>

    <function name="std::addressof" link="cpp/memory/addressof"/>
    <function name="std::align" link="cpp/memory/align"/>
    
    <function name="std::malloc" link="cpp/memory/c/malloc"/>
    <function name="std::calloc" link="cpp/memory/c/calloc"/>
    <function name="std::realloc" link="cpp/memory/c/realloc"/>
    <function name="std::free" link="cpp/memory/c/free"/>

    <!--=======================================================================-->
    <!-- cpp/utility/error -->

    <class name="std::exception" link="cpp/error/exception/exception">
        <constructor/>
        <destructor/>
        <function name="what"/>
    </class>

    <class name="std::logic_error" link="cpp/error/exception/logic_error">
        <inherits name="std::exception"/>
        <constructor/>
    </class>

    <class name="std::domain_error" link="cpp/error/exception/domain_error">
        <inherits name="std::exception"/>
        <constructor/>
    </class>

    <class name="std::length_error" link="cpp/error/exception/length_error">
        <inherits name="std::exception"/>
        <constructor/>
    </class>

    <class name="std::out_of_range" link="cpp/error/exception/out_of_range">
        <inherits name="std::exception"/>
        <constructor/>
    </class>

    <class name="std::invalid_argument" link="cpp/error/exception/invalid_argument">
        <inherits name="std::exception"/>
        <constructor/>
    </class>

    <class name="std::runtime_error" link="cpp/error/exception/runtime_error">
        <inherits name="std::exception"/>
        <constructor/>
    </class>

    <class name="std::range_error" link="cpp/error/exception/range_error">
        <inherits name="std::exception"/>
        <constructor/>
    </class>

    <class name="std::overflow_error" link="cpp/error/exception/overflow_error">
        <inherits name="std::exception"/>
        <constructor/>
    </class>

    <class name="std::underflow_error" link="cpp/error/exception/underflow_error">
        <inherits name="std::exception"/>
        <constructor/>
    </class>

    <function name="assert" link="cpp/error/assert"/>

    <function name="std::uncaught_exception" link="cpp/error/exception/uncaught_exception"/>
    <typedef name="std::exception_ptr" link="cpp/error/exception/exception_ptr"/>
    <function name="std::make_exception_ptr" link="cpp/error/exception/make_exception_ptr"/>
    <function name="std::current_exception" link="cpp/error/exception/current_exception"/>
    <function name="std::nested_exception" link="cpp/error/exception/nested_exception"/>
    <function name="std::throw_with_nested" link="cpp/error/exception/throw_with_nested"/>
    <function name="std::rethrow_if_nested" link="cpp/error/exception/rethrow_if_nested"/>
    
    <function name="std::terminate" link="cpp/error/exception/terminate"/>
    <typedef name="std::terminate_handler" link="cpp/error/exception/terminated_handler"/>
    <function name="std::get_terminate" link="cpp/error/exception/get_terminate"/>
    <function name="std::set_terminate" link="cpp/error/exception/set_terminate"/>
    
    <function name="std::unexpected" link="cpp/error/exception/unexpected"/>
    <class name="std::bad_exception" link="cpp/error/exception/bad_exception"/>
    <typedef name="std::unexpected_handler" link="cpp/error/exception/unexpected_handler"/>
    <function name="std::get_unexpected" link="cpp/error/exception/get_unexpected"/>
    <function name="std::set_unexpected" link="cpp/error/exception/set_unexpected"/>
    
    <const name="errno" link="cpp/error/errno"/>
    <const name="E2BIG" link="cpp/error/errno_macros"/>
    <const name="EACCESS" link="cpp/error/errno_macros"/>
    <const name="EADDRINUSE" link="cpp/error/errno_macros"/>
    <const name="EADDRNOTAVAIL" link="cpp/error/errno_macros"/>
    <const name="EAFNOSUPPORT" link="cpp/error/errno_macros"/>
    <const name="EAGAIN" link="cpp/error/errno_macros"/>
    <const name="EALREADY" link="cpp/error/errno_macros"/>
    <const name="EBADF" link="cpp/error/errno_macros"/>
    <const name="EBADMSG" link="cpp/error/errno_macros"/>
    <const name="EBUSY" link="cpp/error/errno_macros"/>
    <const name="ECANCELED" link="cpp/error/errno_macros"/>
    <const name="ECHILD" link="cpp/error/errno_macros"/>
    <const name="ECONNABORTED" link="cpp/error/errno_macros"/>
    <const name="ECONNREFUSED" link="cpp/error/errno_macros"/>
    <const name="ECONNRESET" link="cpp/error/errno_macros"/>
    <const name="EDEADLK" link="cpp/error/errno_macros"/>
    <const name="EDESTADDRREQ" link="cpp/error/errno_macros"/>
    <const name="EDOM" link="cpp/error/errno_macros"/>
    <const name="EEXIST" link="cpp/error/errno_macros"/>
    <const name="EFAULT" link="cpp/error/errno_macros"/>
    <const name="EFBIG" link="cpp/error/errno_macros"/>
    <const name="EHOSTUNREACH" link="cpp/error/errno_macros"/>
    <const name="EIDRM" link="cpp/error/errno_macros"/>
    <const name="EILSEQ" link="cpp/error/errno_macros"/>
    <const name="EINPROGRESS" link="cpp/error/errno_macros"/>
    <const name="EINTR" link="cpp/error/errno_macros"/>
    <const name="EINVAL" link="cpp/error/errno_macros"/>
    <const name="EIO" link="cpp/error/errno_macros"/>
    <const name="EISCONN" link="cpp/error/errno_macros"/>
    <const name="EISDIR" link="cpp/error/errno_macros"/>
    <const name="ELOOP" link="cpp/error/errno_macros"/>
    <const name="EMFILE" link="cpp/error/errno_macros"/>
    <const name="EMLINK" link="cpp/error/errno_macros"/>
    <const name="EMSGSIZE" link="cpp/error/errno_macros"/>
    <const name="ENAMETOOLONG" link="cpp/error/errno_macros"/>
    <const name="ENETDOWN" link="cpp/error/errno_macros"/>
    <const name="ENETRESET" link="cpp/error/errno_macros"/>
    <const name="ENETUNREACH" link="cpp/error/errno_macros"/>
    <const name="ENFILE" link="cpp/error/errno_macros"/>
    <const name="ENOBUFS" link="cpp/error/errno_macros"/>
    <const name="ENODATA" link="cpp/error/errno_macros"/>
    <const name="ENODEV" link="cpp/error/errno_macros"/>
    <const name="ENOENT" link="cpp/error/errno_macros"/>
    <const name="ENOEXEC" link="cpp/error/errno_macros"/>
    <const name="ENOLCK" link="cpp/error/errno_macros"/>
    <const name="ENOLINK" link="cpp/error/errno_macros"/>
    <const name="ENOMEM" link="cpp/error/errno_macros"/>
    <const name="ENOMSG" link="cpp/error/errno_macros"/>
    <const name="ENOPROTOOPT" link="cpp/error/errno_macros"/>
    <const name="ENOSPC" link="cpp/error/errno_macros"/>
    <const name="ENOSR" link="cpp/error/errno_macros"/>
    <const name="ENOSTR" link="cpp/error/errno_macros"/>
    <const name="ENOSYS" link="cpp/error/errno_macros"/>
    <const name="ENOTCONN" link="cpp/error/errno_macros"/>
    <const name="ENOTDIR" link="cpp/error/errno_macros"/>
    <const name="ENOTEMPTY" link="cpp/error/errno_macros"/>
    <const name="ENOTRECOVERABLE" link="cpp/error/errno_macros"/>
    <const name="ENOTSOCK" link="cpp/error/errno_macros"/>
    <const name="ENOTSUP" link="cpp/error/errno_macros"/>
    <const name="ENOTTY" link="cpp/error/errno_macros"/>
    <const name="ENXIO" link="cpp/error/errno_macros"/>
    <const name="EOPNOTSUPP" link="cpp/error/errno_macros"/>
    <const name="EOVERFLOW" link="cpp/error/errno_macros"/>
    <const name="EOWNERDEAD" link="cpp/error/errno_macros"/>
    <const name="EPERM" link="cpp/error/errno_macros"/>
    <const name="EPIPE" link="cpp/error/errno_macros"/>
    <const name="EPROTO" link="cpp/error/errno_macros"/>
    <const name="EPROTONOSUPPORT" link="cpp/error/errno_macros"/>
    <const name="EPROTOTYPE" link="cpp/error/errno_macros"/>
    <const name="ERANGE" link="cpp/error/errno_macros"/>
    <const name="EROFS" link="cpp/error/errno_macros"/>
    <const name="ESPIPE" link="cpp/error/errno_macros"/>
    <const name="ESRCH" link="cpp/error/errno_macros"/>
    <const name="ETIME" link="cpp/error/errno_macros"/>
    <const name="ETIMEDOUT" link="cpp/error/errno_macros"/>
    <const name="ETXTBSY" link="cpp/error/errno_macros"/>
    <const name="EWOULDBLOCK" link="cpp/error/errno_macros"/>
    <const name="EXDEV" link="cpp/error/errno_macros"/>
    
    <class name="std::error_category" link="cpp/error/system_error/error_category"><!--todo--></class>
    <class name="std::generic_category" link="cpp/error/system_error/generic_category"><!--todo--></class>
    <class name="std::system_category" link="cpp/error/system_error/system_category"><!--todo--></class>
    <class name="std::error_condition" link="cpp/error/system_error/error_condition"><!--todo--></class>
    <function name="std::make_error_condition" link="cpp/error/system_error/make_error_condition"/>
    <function name="std::is_error_condition_enum" link="cpp/error/system_error/is_error_condition_enum"/>
    <class name="std::err_c" link="cpp/error/system_error/err_c"><!--todo--></class>
    <class name="std::error_code" link="cpp/error/system_error/error_code"><!--todo--></class>
    <function name="std::make_error_code" link="cpp/error/system_error/make_error_code"/>
    <function name="std::is_error_code_enum" link="cpp/error/system_error/is_error_code_enum"/>
    <class name="std::system_error" link="cpp/error/system_error/system_error"><!--todo--></class>
    
    <!--=======================================================================-->
    <!-- cpp/utility/initializer_list -->

    <class name="std::initializer_list" link="cpp/utility/initializer_list">
        <constructor/>
        <function name="size"/>
        <function name="begin"/>
        <function name="end"/>
    </class>

    <!--=======================================================================-->
    <!-- cpp/utility/program -->

    <function name="std::abort" link="cpp/utility/program/abort"/>
    <function name="std::exit" link="cpp/utility/program/exit"/>
    <function name="std::quick_exit" link="cpp/utility/program/quick_exit"/>
    <function name="std::_Exit" link="cpp/utility/program/_Exit"/>
    <function name="std::atexit" link="cpp/utility/program/atexit"/>
    <function name="std::at_quick_exit" link="cpp/utility/program/at_quick_exit"/>

    <const name="EXIT_SUCCESS" link="cpp/utility/program/EXIT_SUCCESS"/>
    <const name="EXIT_FAILURE" link="cpp/utility/program/EXIT_FAILURE"/>

    <function name="std::system" link="cpp/utility/program/system"/>
    <function name="std::getenv" link="cpp/utility/program/getenv"/>
    
    <function name="std::signal" link="cpp/utility/program/signal"/>
    <function name="std::raise" link="cpp/utility/program/raise"/>
    <typedef name="std::sig_atomic_t" link="cpp/utility/program/sig_atomic_t"/>

    <const name="SIG_DFL" link="cpp/utility/program/SIG_DFL"/>
    <const name="SIG_IGN" link="cpp/utility/program/SIG_IGN"/>
    <const name="SIG_ERR" link="cpp/utility/program/SIG_ERR"/>
    
    <const name="SIGABRT" link="cpp/utility/program/SIGABRT"/>
    <const name="SIGFPE" link="cpp/utility/program/SIGFPE"/>
    <const name="SIGILL" link="cpp/utility/program/SIGILL"/>
    <const name="SIGINT" link="cpp/utility/program/SIGINT"/>
    <const name="SIGSEGV" link="cpp/utility/program/SIGSEGV"/>
    <const name="SIGTERM" link="cpp/utility/program/SIGTERM"/>

    <function name="std::longjmp" link="cpp/utility/program/longjmp"/>
    <function name="std::setjmp" link="cpp/utility/program/setjmp"/>
    <typedef name="jmp_buf" link="cpp/utility/program/jmp_buf"/>
    
    <!--=======================================================================-->
    <!-- cpp/chrono -->
    
    <class name="std::chrono::time_point" link="cpp/chrono/time_point">
        <constructor/>
        <function name="time_since_epoch"/>
        <function name="min"/>
        <function name="max"/>
        <!-- todo operator -->
    </class>
    
    <class name="std::chrono::duration" link="cpp/chrono/duration">
        <constructor/>
        <destructor/>
        <function name="operotar="/>
        <function name="count"/>
        <function name="zero"/>
        <function name="min"/>
        <function name="max"/>
        <!-- todo operators -->
    </class>
    
    <typedef name="std::chrono::nanoseconds" alias="std::chrono::duration"/>
    <typedef name="std::chrono::microseconds" alias="std::chrono::duration"/>
    <typedef name="std::chrono::milliseconds" alias="std::chrono::duration"/>
    <typedef name="std::chrono::seconds" alias="std::chrono::duration"/>
    <typedef name="std::chrono::minutes" alias="std::chrono::duration"/>
    <typedef name="std::chrono::hours" alias="std::chrono::duration"/>
    
    <class name="std::chrono::treat_as_floating_point" link="cpp/chrono/duration/treat_as_floating_point"><!--todo--></class>
    <class name="std::chrono::duration_values" link="cpp/chrono/duration/duration_values"><!--todo--></class>
    
    <class name="std::chrono::system_clock" link="cpp/chrono/system_clock">
        <const name="is_steady"/>
        <function name="now"/>
        <function name="to_time_t"/>
        <function name="from_time_t"/>
    </class>
    
    <class name="std::chrono::system_clock" link="cpp/chrono/system_clock">
        <const name="is_steady" link="."/>
        <function name="now"/>
    </class>
    
    <class name="std::chrono::system_clock" link="cpp/chrono/system_clock">
        <const name="is_steady"/>
        <function name="now"/>
    </class>
    
    <!-- cpp/chrono/c -->
    
    <function name="std::difftime" link="cpp/chrono/c/difftime"/>
    <function name="std::time" link="cpp/chrono/c/time"/>
    <function name="std::clock" link="cpp/chrono/c/clock"/>
    
    <function name="std::asctime" link="cpp/chrono/c/asctime"/>
    <function name="std::ctime" link="cpp/chrono/c/ctime"/>
    <function name="std::strftime" link="cpp/chrono/c/strftime"/>
    <function name="std::wcsftime" link="cpp/chrono/c/wcsftime"/>
    <function name="std::gmtime" link="cpp/chrono/c/gmtime"/>
    <function name="std::localtime" link="cpp/chrono/c/localtime"/>
    <function name="std::mktime" link="cpp/chrono/c/mktime"/>
    
    <const name="CLOCKS_PER_SEC" link="cpp/chrono/c/CLOCKS_PER_SEC"/>
    
    <class name="std::tm" link="cpp/chrono/c/tm"/>
    <typedef name="std::time_t" link="cpp/chrono/c/time_t"/>
    <typedef name="std::clock_t" link="cpp/chrono/c/clock_t"/>

    <!--=======================================================================-->
    <!-- cpp/utility/bitset -->

    <class name="std::bitset" link="cpp/utility/bitset">
        <constructor/>
        <destructor/>
        <function name="operator="/>
        <function name="operator==" link="operator_cmp"/>
        <function name="operator!=" link="operator_cmp"/>

        <function name="operator[]" link="operator_at"/>
        <function name="test"/>
        <function name="all" link="all_any_none"/>
        <function name="any" link="all_any_none"/>
        <function name="none" link="all_any_none"/>
        <function name="count"/>

        <function name="size"/>
        <function name="operator&amp;=" link="operator_mod"/>
        <function name="operator|=" link="operator_mod"/>
        <function name="operator^=" link="operator_mod"/>
        <function name="operator~" link="operator_mod"/>
        <function name="operator&lt;&lt;=" link="operator_ltltgtgt"/>
        <function name="operator&gt;&gt;=" link="operator_ltltgtgt"/>
        <function name="operator&lt;&lt;" link="operator_ltltgtgt"/>
        <function name="operator&gt;&gt;" link="operator_ltltgtgt"/>
        <function name="set"/>
        <function name="reset"/>
        <function name="flip"/>

        <function name="to_string"/>
        <function name="to_ulong"/>
        <function name="to_ullong"/>
    </class>

    <!--=======================================================================-->
    <!-- cpp/utility/functional -->

    <class name="std::plus" link="cpp/utility/functional/plus">
        <function name="operator()" link="."/>
    </class>
    
    <class name="std::minus" link="cpp/utility/functional/minus">
        <function name="operator()" link="."/>
    </class>
    
    <class name="std::multiplies" link="cpp/utility/functional/multiplies">
        <function name="operator()" link="."/>
    </class>
    
    <class name="std::divides" link="cpp/utility/functional/divides">
        <function name="operator()" link="."/>
    </class>
        
    <class name="std::modulus" link="cpp/utility/functional/modulus">
        <function name="operator()" link="."/>
    </class>
    
    <class name="std::negates" link="cpp/utility/functional/negates">
        <function name="operator()" link="."/>
    </class>
    
    <class name="std::equal_to" link="cpp/utility/functional/equal_to">
        <function name="operator()" link="."/>
    </class>
    
    <class name="std::not_equal_to" link="cpp/utility/functional/not_equal_to">
        <function name="operator()" link="."/>
    </class>
    
    <class name="std::greater" link="cpp/utility/functional/greater">
        <function name="operator()" link="."/>
    </class>
    
    <class name="std::greater_equal" link="cpp/utility/functional/greater_equal">
        <function name="operator()" link="."/>
    </class>
    
    <class name="std::less" link="cpp/utility/functional/less">
        <function name="operator()" link="."/>
    </class>
    
    <class name="std::less_equal" link="cpp/utility/functional/less_equal">
        <function name="operator()" link="."/>
    </class>
    
    <class name="std::logical_and" link="cpp/utility/functional/logical_and">
        <function name="operator()" link="."/>
    </class>
        
    <class name="std::logical_or" link="cpp/utility/functional/logical_or">
        <function name="operator()" link="."/>
    </class>
    
    <class name="std::logical_not" link="cpp/utility/functional/logical_not">
        <function name="operator()" link="."/>
    </class>
    
    <class name="std::bit_and" link="cpp/utility/functional/bit_and">
        <function name="operator()" link="."/>
    </class>
    
    <class name="std::bit_or" link="cpp/utility/functional/bit_or">
        <function name="operator()" link="."/>
    </class>
    
    <class name="std::bit_not" link="cpp/utility/functional/bit_not">
        <function name="operator()" link="."/>
    </class>
    
    <class name="std::unary_negate" link="cpp/utility/functional/unary_negate"><!--todo--></class>
    <class name="std::binary_negate" link="cpp/utility/functional/binary_negate"><!--todo--></class>
    <function name="std::not1" link="cpp/utility/functional/not1"/>
    <function name="std::not2" link="cpp/utility/functional/not2"/>
    
    <function name="std::bind" link="cpp/utility/functional/bind"/>
    <class name="std::is_bind_expression" link="cpp/utility/functional/is_bind_expression"><!--todo--></class>
    <class name="std::is_placeholder" link="cpp/utility/functional/is_placeholder"><!--todo--></class>

    <function name="std::mem_fn" link="cpp/utility/functional/mem_fn"/>
    <class name="std::function" link="cpp/utility/functional/function">
        <constructor/>
        <destructor/>
        <function name="operator="/>
        <function name="swap"/>
        <function name="assign"/>
        <function name="operator bool" link="operator_bool"/>
        <function name="operotor()"/>
        <function name="target_type"/>
        <function name="target"/>
    </class>
    
    <class name="std::bad_function_call" link="cpp/utility/functional/bad_function_call">
        <inherits name="std::exception"/>
        <constructor/>
        <function name="what"/>
    </class>

    <class name="std::placeholders" link="cpp/utility/functional/placeholders"/>
    
    <!--=======================================================================-->
    <!-- cpp/utility -->

    <class name="std::pair" link="cpp/utility/pair">
        <constructor/>
        <function name="operator="/>
        <function name="swap"/>
    </class>
    
    <class name="std::tuple" link="cpp/utility/tuple">
        <constructor/>
        <function name="operator="/>
        <function name="swap"/>
    </class>

    <function name="std::make_pair" link="cpp/utility/make_pair"/>
    <function name="std::make_tuple" link="cpp/utility/make_tuple"/>

    <function name="std::forward" link="cpp/utility/forward"/>
    <function name="std::move" link="cpp/utility/move"/>
    <function name="std::move_if_noexcept" link="cpp/utility/move_if_noexcept"/>
    <function name="std::declval" link="cpp/utility/declval"/>
    
    <function name="std::rel_ops::operator!=" link="cpp/utility/rel_ops/operator_cmp"/>
    <function name="std::rel_ops::operator&gt;" link="cpp/utility/rel_ops/operator_cmp"/>
    <function name="std::rel_ops::operator&lt;=" link="cpp/utility/rel_ops/operator_cmp"/>
    <function name="std::rel_ops::operator&gt;=" link="cpp/utility/rel_ops/operator_cmp"/>
    
    <function name="std::hash" link="cpp/utility/hash"/>

    <!--=======================================================================-->
    <!-- cpp/string/byte -->

    <function name="std::isalnum" link="cpp/string/byte/isalnum"/>
    <function name="std::isalpha" link="cpp/string/byte/isalpha"/>
    <function name="std::islower" link="cpp/string/byte/islower"/>
    <function name="std::isupper" link="cpp/string/byte/isupper"/>
    <function name="std::isdigit" link="cpp/string/byte/isdigit"/>
    <function name="std::isxdigit" link="cpp/string/byte/isxdigit"/>
    <function name="std::iscntrl" link="cpp/string/byte/iscntrl"/>
    <function name="std::isgraph" link="cpp/string/byte/isgraph"/>
    <function name="std::isspace" link="cpp/string/byte/isspace"/>
    <function name="std::isblank" link="cpp/string/byte/isblank"/>
    <function name="std::isprint" link="cpp/string/byte/isprint"/>
    <function name="std::ispunct" link="cpp/string/byte/ispunct"/>
    <function name="std::tolower" link="cpp/string/byte/tolower"/>
    <function name="std::toupper" link="cpp/string/byte/toupper"/>
    
    <function name="std::atof" link="cpp/string/byte/atof"/>
    <function name="std::atoi" link="cpp/string/byte/atoi"/>
    <function name="std::atol" link="cpp/string/byte/atoi"/>
    <function name="std::atoll" link="cpp/string/byte/atoi"/>
    <function name="std::strtol" link="cpp/string/byte/strtol"/>
    <function name="std::strtoll" link="cpp/string/byte/strtol"/>
    <function name="std::strtoul" link="cpp/string/byte/strtoul"/>
    <function name="std::strtoull" link="cpp/string/byte/strtoul"/>
    <function name="std::strtof" link="cpp/string/byte/strtof"/>
    <function name="std::strtod" link="cpp/string/byte/strtof"/>
    <function name="std::strtold" link="cpp/string/byte/strtof"/>
    
    <function name="std::strcpy" link="cpp/string/byte/strcpy"/>
    <function name="std::strncpy" link="cpp/string/byte/strncpy"/>
    <function name="std::strcat" link="cpp/string/byte/strcat"/>
    <function name="std::strncat" link="cpp/string/byte/strncat"/>
    <function name="std::strxfrm" link="cpp/string/byte/strxfrm"/>
    
    <function name="std::strlen" link="cpp/string/byte/strlen"/>
    <function name="std::strcmp" link="cpp/string/byte/strcmp"/>
    <function name="std::strncmp" link="cpp/string/byte/strncmp"/>
    <function name="std::strcoll" link="cpp/string/byte/strcoll"/>
    <function name="std::strchr" link="cpp/string/byte/strchr"/>
    <function name="std::strrchr" link="cpp/string/byte/strrchr"/>
    <function name="std::strspn" link="cpp/string/byte/strspn"/>
    <function name="std::strcspn" link="cpp/string/byte/strcspn"/>
    <function name="std::strpbrk" link="cpp/string/byte/strpbrk"/>
    <function name="std::strstr" link="cpp/string/byte/strstr"/>
    <function name="std::strtok" link="cpp/string/byte/strtok"/>
        
    <function name="std::memchr" link="cpp/string/byte/memchr"/>
    <function name="std::memcmp" link="cpp/string/byte/memcmp"/>
    <function name="std::memset" link="cpp/string/byte/memset"/>
    <function name="std::memcpy" link="cpp/string/byte/memcpy"/>
    <function name="std::memmove" link="cpp/string/byte/memmove"/>

    <function name="std::strerror" link="cpp/string/byte/strerror"/>

    <!-- cpp/string/multibyte -->
    
    <function name="std::mblen" link="cpp/string/multibyte/mblen"/>
    <function name="std::mbtowc" link="cpp/string/multibyte/mbtowc"/>
    <function name="std::wctomb" link="cpp/string/multibyte/wctomb"/>
    <function name="std::mbstowcs" link="cpp/string/multibyte/mbstowcs"/>
    <function name="std::wcstombs" link="cpp/string/multibyte/wcstombs"/>
    
    <function name="std::mbsinit" link="cpp/string/multibyte/mbsinit"/>
    <function name="std::btowc" link="cpp/string/multibyte/btowc"/>
    <function name="std::wctob" link="cpp/string/multibyte/wctob"/>
    <function name="std::mbrlen" link="cpp/string/multibyte/mbrlen"/>
    <function name="std::mbrtowc" link="cpp/string/multibyte/mbrtowc"/>
    <function name="std::wcrtomb" link="cpp/string/multibyte/wcrtomb"/>
    <function name="std::mbsrtowcs" link="cpp/string/multibyte/mbsrtowcs"/>
    <function name="std::wcstombs" link="cpp/string/multibyte/wcstombs"/>
    
    <function name="std::mbrtoc16" link="cpp/string/multibyte/mbrtoc16"/>
    <function name="std::c16rtomb" link="cpp/string/multibyte/c16rtomb"/>
    <function name="std::mbrtoc32" link="cpp/string/multibyte/mbrtoc32"/>
    <function name="std::c32rtomb" link="cpp/string/multibyte/c32rtomb"/>
    
    <class name="std::mbstate_t" link="cpp/string/multibyte/mbstate_t"/>
    
    <!-- cpp/string/wide -->
    
    <function name="std::iswalnum" link="cpp/string/wide/iswalnum"/>
    <function name="std::iswalpha" link="cpp/string/wide/iswalpha"/>
    <function name="std::iswlower" link="cpp/string/wide/iswlower"/>
    <function name="std::iswupper" link="cpp/string/wide/iswupper"/>
    <function name="std::iswdigit" link="cpp/string/wide/iswdigit"/>
    <function name="std::iswxdigit" link="cpp/string/wide/iswxdigit"/>
    <function name="std::iswcntrl" link="cpp/string/wide/iswcntrl"/>
    <function name="std::iswgraph" link="cpp/string/wide/iswgraph"/>
    <function name="std::iswspace" link="cpp/string/wide/iswspace"/>
    <function name="std::iswblank" link="cpp/string/wide/iswblank"/>
    <function name="std::iswprint" link="cpp/string/wide/iswprint"/>
    <function name="std::iswpunct" link="cpp/string/wide/iswpunct"/>
    <function name="std::iswctype" link="cpp/string/wide/iswctype"/>
    <function name="std::wctype" link="cpp/string/wide/wctype"/>
    
    <function name="std::towlower" link="cpp/string/wide/tolower"/>
    <function name="std::towupper" link="cpp/string/wide/toupper"/>
    <function name="std::towctrans" link="cpp/string/wide/towctrans"/>
    <function name="std::wctrans" link="cpp/string/wide/wctrans"/>
    
    <function name="std::wcstof" link="cpp/string/wide/wcstof"/>
    <function name="std::wcstod" link="cpp/string/wide/wcstof"/>
    <function name="std::wcstold" link="cpp/string/wide/wcstof"/>
    <function name="std::wcstol" link="cpp/string/wide/wcstol"/>
    <function name="std::wcstoll" link="cpp/string/wide/wcstol"/>
    <function name="std::wcstoul" link="cpp/string/wide/wcstoul"/>
    <function name="std::wcstoull" link="cpp/string/wide/wcstoul"/>
    
    <function name="std::wcscpy" link="cpp/string/wide/wcscpy"/>
    <function name="std::wcsncpy" link="cpp/string/wide/wcsncpy"/>
    <function name="std::wcscat" link="cpp/string/wide/wcscat"/>
    <function name="std::wcsncat" link="cpp/string/wide/wcsncat"/>
    <function name="std::wcsxfrm" link="cpp/string/wide/wcsxfrm"/>
    
    <function name="std::wcslen" link="cpp/string/wide/wcslen"/>
    <function name="std::wcscmp" link="cpp/string/wide/wcscmp"/>
    <function name="std::wcsncmp" link="cpp/string/wide/wcsncmp"/>
    <function name="std::wcscoll" link="cpp/string/wide/wcscoll"/>
    <function name="std::wcschr" link="cpp/string/wide/wcschr"/>
    <function name="std::wcsrchr" link="cpp/string/wide/wcsrchr"/>
    <function name="std::wcsspn" link="cpp/string/wide/wcsspn"/>
    <function name="std::wcscspn" link="cpp/string/wide/wcscspn"/>
    <function name="std::wcspbrk" link="cpp/string/wide/wcspbrk"/>
    <function name="std::wcsstr" link="cpp/string/wide/wcsstr"/>
    <function name="std::wcstok" link="cpp/string/wide/wcstok"/>
        
    <function name="std::wmemchr" link="cpp/string/wide/wmemchr"/>
    <function name="std::wmemcmp" link="cpp/string/wide/wmemcmp"/>
    <function name="std::wmemset" link="cpp/string/wide/wmemset"/>
    <function name="std::wmemcpy" link="cpp/string/wide/wmemcpy"/>
    <function name="std::wmemmove" link="cpp/string/wide/wmemmove"/>

    <!-- cpp/string/basic_string -->

    <class name="std::basic_string" link="cpp/string/basic_string">
        <constructor/>
        <function name="assign"/>
        <function name="operator="/>
        <function name="get_allocator"/>

        <function name="at"/>
        <function name="operator[]" link="operator_at"/>
        <function name="front"/>
        <function name="back"/>
        <function name="data"/>
        <function name="c_str"/>

        <function name="begin"/>
        <function name="cbegin" link="begin"/>
        <function name="end"/>
        <function name="cend" link="end"/>
        <function name="rbegin"/>
        <function name="crbegin" link="rbegin"/>
        <function name="rend"/>
        <function name="crend" link="rend"/>

        <function name="empty"/>
        <function name="size"/>
        <function name="length"/>
        <function name="max_size"/>
        <function name="reserve"/>
        <function name="capacity"/>
        <function name="shrink_to_fit"/>

        <function name="clear"/>
        <function name="insert"/>
        <function name="erase"/>
        <function name="push_back"/>
        <function name="pop_back"/>
        <function name="append"/>
        <function name="compare"/>
        <function name="replace"/>
        <function name="substr"/>
        <function name="copy"/>
        <function name="resize"/>
        <function name="swap"/>

        <function name="find"/>
        <function name="rfind"/>
        <function name="find_first_of"/>
        <function name="find_first_not_of"/>
        <function name="find_last_of"/>
        <function name="find_last_not_of"/>

        <const name="npos"/>
    </class>

    <typedef name="std::string" alias="std::basic_string"/>
    <typedef name="std::wstring" alias="std::basic_string"/>
    <typedef name="std::u16string" alias="std::basic_string"/>
    <typedef name="std::u32string" alias="std::basic_string"/>

    <!-- cpp/string -->

    <function name="std::getline" link="cpp/string/getline"/>
    <function name="std::stoi" link="cpp/string/stol"/>
    <function name="std::stol" link="cpp/string/stol"/>
    <function name="std::stoll" link="cpp/string/stol"/>
    <function name="std::stoul" link="cpp/string/stoul"/>
    <function name="std::stoull" link="cpp/string/stoul"/>
    <function name="std::stof" link="cpp/string/stof"/>
    <function name="std::stod" link="cpp/string/stof"/>
    <function name="std::stold" link="cpp/string/stof"/>
    <function name="std::to_string" link="cpp/string/to_string"/>
    <function name="std::to_wstring" link="cpp/string/to_wstring"/>

    <class name="std::char_traits" link="cpp/string/char_traits">
        <function name="assign" link="."/>
        <function name="eq" link="."/>
        <function name="lt" link="."/>
        <function name="move" link="."/>
        <function name="copy" link="."/>
        <function name="compare" link="."/>
        <function name="length" link="."/>
        <function name="find" link="."/>
        <function name="to_char_type" link="."/>
        <function name="to_int_type" link="."/>
        <function name="eq_int_type" link="."/>
        <function name="eof" link="."/>
        <function name="not_eof" link="."/>
    </class>

    <!-- cpp/container -->

    <class name="std::array" link="cpp/container/array">

        <function name="at"/>
        <function name="operator[]" link="operator_at"/>
        <function name="front"/>
        <function name="back"/>
        <function name="data"/>

        <function name="begin"/>
        <function name="cbegin" link="begin"/>
        <function name="end"/>
        <function name="cend" link="end"/>
        <function name="rbegin"/>
        <function name="crbegin" link="rbegin"/>
        <function name="rend"/>
        <function name="crend" link="rend"/>

        <function name="empty"/>
        <function name="size"/>
        <function name="max_size"/>

        <function name="fill"/>
        <function name="swap"/>
    </class>

    <class name="std::vector" link="cpp/container/vector">
        <constructor/>
        <destructor/>
        <function name="operator="/>
        <function name="assign"/>
        <function name="get_allocator"/>

        <function name="at"/>
        <function name="operator[]" link="operator_at"/>
        <function name="front"/>
        <function name="back"/>
        <function name="data"/>

        <function name="begin"/>
        <function name="cbegin" link="begin"/>
        <function name="end"/>
        <function name="cend" link="end"/>
        <function name="rbegin"/>
        <function name="crbegin" link="rbegin"/>
        <function name="rend"/>
        <function name="crend" link="rend"/>

        <function name="empty"/>
        <function name="size"/>
        <function name="max_size"/>
        <function name="reserve"/>
        <function name="capacity"/>
        <function name="shrink_to_fit"/>

        <function name="clear"/>
        <function name="insert"/>
        <function name="emplace"/>
        <function name="erase"/>
        <function name="push_back"/>
        <function name="emplace_back"/>
        <function name="pop_back"/>
        <function name="resize"/>
        <function name="swap"/>
    </class>

    <class name="std::deque" link="cpp/container/deque">
        <constructor/>
        <destructor/>
        <function name="operator="/>
        <function name="assign"/>
        <function name="get_allocator"/>

        <function name="at"/>
        <function name="operator[]" link="operator_at"/>
        <function name="front"/>
        <function name="back"/>

        <function name="begin"/>
        <function name="cbegin" link="begin"/>
        <function name="end"/>
        <function name="cend" link="end"/>
        <function name="rbegin"/>
        <function name="crbegin" link="rbegin"/>
        <function name="rend"/>
        <function name="crend" link="rend"/>

        <function name="empty"/>
        <function name="size"/>
        <function name="max_size"/>
        <function name="shrink_to_fit"/>

        <function name="clear"/>
        <function name="insert"/>
        <function name="emplace"/>
        <function name="erase"/>
        <function name="push_back"/>
        <function name="emplace_back"/>
        <function name="pop_back"/>
        <function name="push_front"/>
        <function name="pemplace_front"/>
        <function name="pop_front"/>
        <function name="resize"/>
        <function name="swap"/>
    </class>
    
    <class name="std::forward_list" link="cpp/container/forward_list">
        <constructor/>
        <destructor/>
        <function name="operator="/>
        <function name="assign"/>
        <function name="get_allocator"/>

        <function name="front"/>

        <function name="beforebegin"/>
        <function name="cbeforebegin" link="beforebegin"/>
        <function name="begin"/>
        <function name="cbegin" link="begin"/>
        <function name="end"/>
        <function name="cend" link="end"/>

        <function name="empty"/>
        <function name="max_size"/>

        <function name="clear"/>
        <function name="insert_after"/>
        <function name="emplace_after"/>
        <function name="erase_after"/>
        <function name="insert"/>
        <function name="emplace"/>
        <function name="erase"/>
        <function name="push_front"/>
        <function name="pemplace_front"/>
        <function name="pop_front"/>
        <function name="resize"/>
        <function name="swap"/>

        <function name="merge"/>
        <function name="splice"/>
        <function name="remove"/>
        <function name="remove_if"/>
        <function name="reverse"/>
        <function name="unique"/>
        <function name="sort"/>

    </class>
    
    <class name="std::list" link="cpp/container/list">
        <constructor/>
        <destructor/>
        <function name="operator="/>
        <function name="assign"/>
        <function name="get_allocator"/>

        <function name="front"/>
        <function name="back"/>

        <function name="begin"/>
        <function name="cbegin" link="begin"/>
        <function name="end"/>
        <function name="cend" link="end"/>
        <function name="rbegin"/>
        <function name="crbegin" link="rbegin"/>
        <function name="rend"/>
        <function name="crend" link="rend"/>

        <function name="empty"/>
        <function name="size"/>
        <function name="max_size"/>

        <function name="clear"/>
        <function name="insert"/>
        <function name="emplace"/>
        <function name="erase"/>
        <function name="push_back"/>
        <function name="emplace_back"/>
        <function name="pop_back"/>
        <function name="push_front"/>
        <function name="pemplace_front"/>
        <function name="pop_front"/>
        <function name="resize"/>
        <function name="swap"/>

        <function name="merge"/>
        <function name="splice"/>
        <function name="remove"/>
        <function name="remove_if"/>
        <function name="reverse"/>
        <function name="unique"/>
        <function name="sort"/>
    </class>
    
    <class name="std::set" link="cpp/container/set">
        <constructor/>
        <destructor/>
        <function name="operator="/>
        <function name="get_allocator"/>

        <function name="begin"/>
        <function name="cbegin" link="begin"/>
        <function name="end"/>
        <function name="cend" link="end"/>
        <function name="rbegin"/>
        <function name="crbegin" link="rbegin"/>
        <function name="rend"/>
        <function name="crend" link="rend"/>

        <function name="empty"/>
        <function name="size"/>
        <function name="max_size"/>

        <function name="clear"/>
        <function name="insert"/>
        <function name="emplace"/>
        <function name="emplace_hint"/>
        <function name="erase"/>
        <function name="swap"/>
        
        <function name="count"/>
        <function name="find"/>
        <function name="equal_range"/>
        <function name="lower_bound"/>
        <function name="upper_bound"/>
        
        <function name="key_comp"/>
        <function name="value_comp"/>
    </class>
    
    <class name="std::multiset" link="cpp/container/multiset">
        <constructor/>
        <destructor/>
        <function name="operator="/>
        <function name="get_allocator"/>

        <function name="begin"/>
        <function name="cbegin" link="begin"/>
        <function name="end"/>
        <function name="cend" link="end"/>
        <function name="rbegin"/>
        <function name="crbegin" link="rbegin"/>
        <function name="rend"/>
        <function name="crend" link="rend"/>

        <function name="empty"/>
        <function name="size"/>
        <function name="max_size"/>

        <function name="clear"/>
        <function name="insert"/>
        <function name="emplace"/>
        <function name="emplace_hint"/>
        <function name="erase"/>
        <function name="swap"/>
        
        <function name="count"/>
        <function name="find"/>
        <function name="equal_range"/>
        <function name="lower_bound"/>
        <function name="upper_bound"/>
        
        <function name="key_comp"/>
        <function name="value_comp"/>
    </class>
    
    <class name="std::map" link="cpp/container/map">
        <constructor/>
        <destructor/>
        <function name="operator="/>
        <function name="get_allocator"/>

        <function name="at"/>
        <function name="operator[]" link="operator_at"/>

        <function name="begin"/>
        <function name="cbegin" link="begin"/>
        <function name="end"/>
        <function name="cend" link="end"/>
        <function name="rbegin"/>
        <function name="crbegin" link="rbegin"/>
        <function name="rend"/>
        <function name="crend" link="rend"/>

        <function name="empty"/>
        <function name="size"/>
        <function name="max_size"/>

        <function name="clear"/>
        <function name="insert"/>
        <function name="emplace"/>
        <function name="emplace_hint"/>
        <function name="erase"/>
        <function name="swap"/>
        
        <function name="count"/>
        <function name="find"/>
        <function name="equal_range"/>
        <function name="lower_bound"/>
        <function name="upper_bound"/>
        
        <function name="key_comp"/>
        <function name="value_comp"/>
    </class>
    
    <class name="std::multimap" link="cpp/container/multimap">
        <constructor/>
        <destructor/>
        <function name="operator="/>
        <function name="get_allocator"/>

        <function name="begin"/>
        <function name="cbegin" link="begin"/>
        <function name="end"/>
        <function name="cend" link="end"/>
        <function name="rbegin"/>
        <function name="crbegin" link="rbegin"/>
        <function name="rend"/>
        <function name="crend" link="rend"/>

        <function name="empty"/>
        <function name="size"/>
        <function name="max_size"/>

        <function name="clear"/>
        <function name="insert"/>
        <function name="emplace"/>
        <function name="emplace_hint"/>
        <function name="erase"/>
        <function name="swap"/>
        
        <function name="count"/>
        <function name="find"/>
        <function name="equal_range"/>
        <function name="lower_bound"/>
        <function name="upper_bound"/>
        
        <function name="key_comp"/>
        <function name="value_comp"/>
    </class>
    
    <class name="std::unordered_set" link="cpp/container/unordered_set">
        <constructor/>
        <destructor/>
        <function name="operator="/>
        <function name="get_allocator"/>

        <function name="begin"/>
        <function name="cbegin" link="begin"/>
        <function name="end"/>
        <function name="cend" link="end"/>

        <function name="empty"/>
        <function name="size"/>
        <function name="max_size"/>

        <function name="clear"/>
        <function name="insert"/>
        <function name="emplace"/>
        <function name="emplace_hint"/>
        <function name="erase"/>
        <function name="swap"/>
        
        <function name="count"/>
        <function name="find"/>
        <function name="equal_range"/>
        
        <function name="begin(int)"/>
        <function name="cbegin(int)" link="begin(int)"/>
        <function name="bend(int)"/>
        <function name="cend(int)" link="end(int)"/>
        
        <function name="bucket_count"/>
        <function name="max_bucket_count"/>
        <function name="bucket_size"/>
        <function name="bucket"/>
        
        <function name="load_factor"/>
        <function name="max_load_factor"/>
        <function name="reserve"/>
        <function name="rehash"/>
        
        <function name="hash_function"/>
        <function name="key_eq"/>
    </class>
    
    <class name="std::unordered_multiset" link="cpp/container/unordered_multiset">
        <constructor/>
        <destructor/>
        <function name="operator="/>
        <function name="get_allocator"/>

        <function name="begin"/>
        <function name="cbegin" link="begin"/>
        <function name="end"/>
        <function name="cend" link="end"/>

        <function name="empty"/>
        <function name="size"/>
        <function name="max_size"/>

        <function name="clear"/>
        <function name="insert"/>
        <function name="emplace"/>
        <function name="emplace_hint"/>
        <function name="erase"/>
        <function name="swap"/>
        
        <function name="count"/>
        <function name="find"/>
        <function name="equal_range"/>
        
        <function name="begin(int)"/>
        <function name="cbegin(int)" link="begin(int)"/>
        <function name="bend(int)"/>
        <function name="cend(int)" link="end(int)"/>
        
        <function name="bucket_count"/>
        <function name="max_bucket_count"/>
        <function name="bucket_size"/>
        <function name="bucket"/>
        
        <function name="load_factor"/>
        <function name="max_load_factor"/>
        <function name="reserve"/>
        <function name="rehash"/>
        
        <function name="hash_function"/>
        <function name="key_eq"/>
    </class>
    
    <class name="std::unordered_map" link="cpp/container/unordered_map">
        <constructor/>
        <destructor/>
        <function name="operator="/>
        <function name="get_allocator"/>

        <function name="begin"/>
        <function name="cbegin" link="begin"/>
        <function name="end"/>
        <function name="cend" link="end"/>

        <function name="empty"/>
        <function name="size"/>
        <function name="max_size"/>

        <function name="clear"/>
        <function name="insert"/>
        <function name="emplace"/>
        <function name="emplace_hint"/>
        <function name="erase"/>
        <function name="swap"/>
        
        <function name="at"/>
        <function name="operator[]" link="operator_at"/>
        <function name="count"/>
        <function name="find"/>
        <function name="equal_range"/>
        
        <function name="begin(int)"/>
        <function name="cbegin(int)" link="begin(int)"/>
        <function name="bend(int)"/>
        <function name="cend(int)" link="end(int)"/>
        
        <function name="bucket_count"/>
        <function name="max_bucket_count"/>
        <function name="bucket_size"/>
        <function name="bucket"/>
        
        <function name="load_factor"/>
        <function name="max_load_factor"/>
        <function name="reserve"/>
        <function name="rehash"/>
        
        <function name="hash_function"/>
        <function name="key_eq"/>
    </class>
    
    <class name="std::unordered_multimap" link="cpp/container/unordered_multimap">
        <constructor/>
        <destructor/>
        <function name="operator="/>
        <function name="get_allocator"/>

        <function name="begin"/>
        <function name="cbegin" link="begin"/>
        <function name="end"/>
        <function name="cend" link="end"/>

        <function name="empty"/>
        <function name="size"/>
        <function name="max_size"/>

        <function name="clear"/>
        <function name="insert"/>
        <function name="emplace"/>
        <function name="emplace_hint"/>
        <function name="erase"/>
        <function name="swap"/>
        
        <function name="count"/>
        <function name="find"/>
        <function name="equal_range"/>
        
        <function name="begin(int)"/>
        <function name="cbegin(int)" link="begin(int)"/>
        <function name="bend(int)"/>
        <function name="cend(int)" link="end(int)"/>
        
        <function name="bucket_count"/>
        <function name="max_bucket_count"/>
        <function name="bucket_size"/>
        <function name="bucket"/>
        
        <function name="load_factor"/>
        <function name="max_load_factor"/>
        <function name="reserve"/>
        <function name="rehash"/>
        
        <function name="hash_function"/>
        <function name="key_eq"/>
    </class>
    
    <class name="std::stack" link="cpp/container/stack">
        <constructor/>
        <destructor/>
        <function name="operator="/>

        <function name="top"/>
        
        <function name="empty"/>
        <function name="size"/>
        
        <function name="push"/>
        <function name="emplace"/>
        <function name="pop"/>
        <function name="swap"/>
    </class>
    
    <class name="std::queue" link="cpp/container/queue">
        <constructor/>
        <destructor/>
        <function name="operator="/>

        <function name="front"/>
        <function name="back"/>
        
        <function name="empty"/>
        <function name="size"/>
        
        <function name="push"/>
        <function name="emplace"/>
        <function name="pop"/>
        <function name="swap"/>
    </class>
    
    <class name="std::priority_queue" link="cpp/container/priority_queue">
        <constructor/>
        <destructor/>
        <function name="operator="/>

        <function name="top"/>
        
        <function name="empty"/>
        <function name="size"/>
        
        <function name="push"/>
        <function name="emplace"/>
        <function name="pop"/>
        <function name="swap"/>
    </class>

    <!-- cpp/numeric/math -->

    <function name="std::abs(int)" link="cpp/numeric/math/abs"/>
    <function name="std::labs" link="cpp/numeric/math/abs"/>
    <function name="std::llabs" link="cpp/numeric/math/abs"/>
    <function name="std::abs(float)" link="cpp/numeric/math/fabs"/>
    <function name="std::fabs" link="cpp/numeric/math/fabs"/>
    <function name="std::div" link="cpp/numeric/math/div"/>
    <function name="std::ldiv" link="cpp/numeric/math/ldiv"/>
    <function name="std::fmod" link="cpp/numeric/math/fmod"/>
    <function name="std::remainder" link="cpp/numeric/math/remainder"/>
    <function name="std::remquo" link="cpp/numeric/math/remquo"/>
    <function name="std::fma" link="cpp/numeric/math/fma"/>
    <function name="std::fmax" link="cpp/numeric/math/fmax"/>
    <function name="std::fmin" link="cpp/numeric/math/fmin"/>
    <function name="std::fdim" link="cpp/numeric/math/fdim"/>
    <function name="std::nan" link="cpp/numeric/math/nan"/>
    <function name="std::nanf" link="cpp/numeric/math/nan"/>
    <function name="std::nanl" link="cpp/numeric/math/nan"/>
    
    <function name="std::exp" link="cpp/numeric/math/exp"/>
    <function name="std::exp2" link="cpp/numeric/math/exp2"/>
    <function name="std::expm1" link="cpp/numeric/math/expm1"/>
    <function name="std::log" link="cpp/numeric/math/log"/>
    <function name="std::log10" link="cpp/numeric/math/log10"/>
    <function name="std::log1p" link="cpp/numeric/math/log1p"/>
    <function name="std::ilogb" link="cpp/numeric/math/ilogb"/>
    <function name="std::logb" link="cpp/numeric/math/logb"/>
    
    <function name="std::sqrt" link="cpp/numeric/math/sqrt"/>
    <function name="std::cbrt" link="cpp/numeric/math/cbrt"/>
    <function name="std::hypot" link="cpp/numeric/math/hypot"/>
    <function name="std::pow" link="cpp/numeric/math/pow"/>
    
    <function name="std::sin" link="cpp/numeric/math/sin"/>
    <function name="std::cos" link="cpp/numeric/math/cos"/>
    <function name="std::tan" link="cpp/numeric/math/tan"/>
    <function name="std::asin" link="cpp/numeric/math/asin"/>
    <function name="std::acos" link="cpp/numeric/math/acos"/>
    <function name="std::atan" link="cpp/numeric/math/atan"/>
    <function name="std::atan2" link="cpp/numeric/math/atan2"/>
    <function name="std::sinh" link="cpp/numeric/math/sinh"/>
    <function name="std::cosh" link="cpp/numeric/math/cosh"/>
    <function name="std::tanh" link="cpp/numeric/math/tanh"/>
    <function name="std::asinh" link="cpp/numeric/math/asinh"/>
    <function name="std::acosh" link="cpp/numeric/math/acosh"/>
    <function name="std::atanh" link="cpp/numeric/math/atanh"/>
    
    <function name="std::erf" link="cpp/numeric/math/erf"/>
    <function name="std::erfc" link="cpp/numeric/math/erfc"/>
    <function name="std::lgamma" link="cpp/numeric/math/lgamma"/>
    <function name="std::tgamma" link="cpp/numeric/math/tgamma"/>
    
    <function name="std::ceil" link="cpp/numeric/math/ceil"/>
    <function name="std::floor" link="cpp/numeric/math/floor"/>
    <function name="std::trunc" link="cpp/numeric/math/trunc"/>
    <function name="std::round" link="cpp/numeric/math/round"/>
    <function name="std::lround" link="cpp/numeric/math/round"/>
    <function name="std::llround" link="cpp/numeric/math/round"/>
    <function name="std::nearbyint" link="cpp/numeric/math/nearbyint"/>
    <function name="std::rint" link="cpp/numeric/math/rint"/>
    <function name="std::lrint" link="cpp/numeric/math/rint"/>
    <function name="std::llrint" link="cpp/numeric/math/rint"/>
    
    <function name="std::frexp" link="cpp/numeric/math/frexp"/>
    <function name="std::ldexp" link="cpp/numeric/math/ldexp"/>
    <function name="std::modf" link="cpp/numeric/math/modf"/>
    <function name="std::scalbn" link="cpp/numeric/math/scalbn"/>
    <function name="std::scalbln" link="cpp/numeric/math/scalbn"/>
    <function name="std::nextafter" link="cpp/numeric/math/nextafter"/>
    <function name="std::nexttoward" link="cpp/numeric/math/nexttoward"/>
    <function name="std::copysign" link="cpp/numeric/math/copysign"/>
    
    <function name="std::fpclassify" link="cpp/numeric/math/fpclassify"/>
    <function name="std::isfinite" link="cpp/numeric/math/isfinite"/>
    <function name="std::isinf" link="cpp/numeric/math/isinf"/>
    <function name="std::isnan" link="cpp/numeric/math/isnan"/>
    <function name="std::isnormal" link="cpp/numeric/math/isnormal"/>
    <function name="std::signbit" link="cpp/numeric/math/signbit"/>

    <const name="HUGE_VAL" link="cpp/numeric/math/HUGE_VAL"/>
    <const name="HUGE_VALF" link="cpp/numeric/math/HUGE_VAL"/>
    <const name="HUGE_VALL" link="cpp/numeric/math/HUGE_VAL"/>
    <const name="FP_INFINITE" link="cpp/numeric/math/FP_categories"/>
    <const name="FP_NAN" link="cpp/numeric/math/FP_categories"/>
    <const name="FP_NORMAL" link="cpp/numeric/math/FP_categories"/>
    <const name="FP_SUBNORMAL" link="cpp/numeric/math/FP_categories"/>
    <const name="FP_ZERO" link="cpp/numeric/math/FP_categories"/>
    
    <!-- cpp/numeric/random -->

    <class name="std::linear_congruential_engine" link="cpp/numeric/random/linear_congruential_engine"><!--todo--></class>
    <class name="std::mersenne_twister_engine" link="cpp/numeric/random/mersenne_twister_engine"><!--todo--></class>
    <class name="std::subtract_with_carry_engine" link="cpp/numeric/random/subtract_with_carry_engine"><!--todo--></class>
    <class name="std::discard_block_engine" link="cpp/numeric/random/discard_block_engine"><!--todo--></class>
    <class name="std::independent_bits_engine" link="cpp/numeric/random/independent_bits_engine"><!--todo--></class>
    <class name="std::shuffle_order_engine" link="cpp/numeric/random/shuffle_order_engine"><!--todo--></class>
    
    <typedef name="std::minstd_rand0" alias="std::linear_congruential_engine"/>
    <typedef name="std::minstd_rand" alias="std::linear_congruential_engine"/>
    <typedef name="std::mt19937" alias="std::mersenne_twister_engine"/>
    <typedef name="std::mt19937_64" alias="std::mersenne_twister_engine"/>
    <typedef name="std::ranlux24_base" alias="std::subtract_with_carry_engine"/>
    <typedef name="std::ranlux48_base" alias="std::subtract_with_carry_engine"/>
    <typedef name="std::ranlux24" alias="std::discard_block_engine"/>
    <typedef name="std::ranlux48" alias="std::discard_block_engine"/>
    <typedef name="std::knuth_b" alias="std::shuffle_order_engine"/>
    <typedef name="std::default_random_engine" link="cpp/numeric/random"/>
    
    <function name="std::srand" link="cpp/numeric/random/srand"/>
    <function name="std::rand" link="cpp/numeric/random/srand"/>
    <const name="MAX_RANDOM" link="cpp/numeric/random/MAX_RANDOM"/>
    
    <function name="std::generate_canonical" link="cpp/numeric/random/generate_canonical"/>
    
    <class name="std::uniform_int_distribution" link="cpp/numeric/random/uniform_int_distribution">
        <constructor/>
        <function name="reset"/>
        <function name="operator()"/>
        
        <function name="a"/>
        <function name="b"/>
        <function name="param"/>
        <function name="min"/>
        <function name="max"/>
        
        <function name="operator==" link="operator_cmp"/>
        <function name="operator!=" link="operator_cmp"/>
        
        <function name="operator&lt;&lt;" link="operator_ltltgtgt"/>
        <function name="operator&gt;&gt;" link="operator_ltltgtgt"/>
    </class>
    
    <class name="std::uniform_real_distribution" link="cpp/numeric/random/uniform_real_distribution">
        <constructor/>
        <function name="reset"/>
        <function name="operator()"/>
        
        <function name="a"/>
        <function name="b"/>
        <function name="param"/>
        <function name="min"/>
        <function name="max"/>
        
        <function name="operator==" link="operator_cmp"/>
        <function name="operator!=" link="operator_cmp"/>
        
        <function name="operator&lt;&lt;" link="operator_ltltgtgt"/>
        <function name="operator&gt;&gt;" link="operator_ltltgtgt"/>
    </class>

    <class name="std::bernoulli_distribution" link="cpp/numeric/random/bernoulli_distribution">
        <constructor/>
        <function name="reset"/>
        <function name="operator()"/>
        
        <function name="p"/>
        <function name="param"/>
        <function name="min"/>
        <function name="max"/>
        
        <function name="operator==" link="operator_cmp"/>
        <function name="operator!=" link="operator_cmp"/>
        
        <function name="operator&lt;&lt;" link="operator_ltltgtgt"/>
        <function name="operator&gt;&gt;" link="operator_ltltgtgt"/>
    </class>
    
    <class name="std::binomial_distribution" link="cpp/numeric/random/binomial_distribution">
        <constructor/>
        <function name="reset"/>
        <function name="operator()"/>
        
        <function name="t"/>
        <function name="p"/>
        <function name="param"/>
        <function name="min"/>
        <function name="max"/>
        
        <function name="operator==" link="operator_cmp"/>
        <function name="operator!=" link="operator_cmp"/>
        
        <function name="operator&lt;&lt;" link="operator_ltltgtgt"/>
        <function name="operator&gt;&gt;" link="operator_ltltgtgt"/>
    </class>
    
    <class name="std::negative_binomial_distribution" link="cpp/numeric/random/negative_binomial_distribution">
        <constructor/>
        <function name="reset"/>
        <function name="operator()"/>
        
        <function name="k"/>
        <function name="p"/>
        <function name="param"/>
        <function name="min"/>
        <function name="max"/>
        
        <function name="operator==" link="operator_cmp"/>
        <function name="operator!=" link="operator_cmp"/>
        
        <function name="operator&lt;&lt;" link="operator_ltltgtgt"/>
        <function name="operator&gt;&gt;" link="operator_ltltgtgt"/>
    </class>
    
    <class name="std::geometric_distribution" link="cpp/numeric/random/geometric_distribution">
        <constructor/>
        <function name="reset"/>
        <function name="operator()"/>
        
        <function name="p"/>
        <function name="param"/>
        <function name="min"/>
        <function name="max"/>
        
        <function name="operator==" link="operator_cmp"/>
        <function name="operator!=" link="operator_cmp"/>
        
        <function name="operator&lt;&lt;" link="operator_ltltgtgt"/>
        <function name="operator&gt;&gt;" link="operator_ltltgtgt"/>
    </class>

    <class name="std::poisson_distribution" link="cpp/numeric/random/poisson_distribution">
        <constructor/>
        <function name="reset"/>
        <function name="operator()"/>
        
        <function name="mean"/>
        <function name="param"/>
        <function name="min"/>
        <function name="max"/>
        
        <function name="operator==" link="operator_cmp"/>
        <function name="operator!=" link="operator_cmp"/>
        
        <function name="operator&lt;&lt;" link="operator_ltltgtgt"/>
        <function name="operator&gt;&gt;" link="operator_ltltgtgt"/>
    </class>
    
    <class name="std::exponential_distribution" link="cpp/numeric/random/exponential_distribution">
        <constructor/>
        <function name="reset"/>
        <function name="operator()"/>
        
        <function name="lambda"/>
        <function name="param"/>
        <function name="min"/>
        <function name="max"/>
        
        <function name="operator==" link="operator_cmp"/>
        <function name="operator!=" link="operator_cmp"/>
        
        <function name="operator&lt;&lt;" link="operator_ltltgtgt"/>
        <function name="operator&gt;&gt;" link="operator_ltltgtgt"/>
    </class>
    
    <class name="std::gamma_distribution" link="cpp/numeric/random/gamma_distribution"><!--todo--></class>
    <class name="std::weibull_distribution" link="cpp/numeric/random/weibull_distribution"><!--todo--></class>
    <class name="std::extreme_value_distribution" link="cpp/numeric/random/extreme_value_distribution"><!--todo--></class>

    <class name="std::normal_distribution" link="cpp/numeric/random/normal_distribution"><!--todo--></class>
    <class name="std::lognormal_distribution" link="cpp/numeric/random/lognormal_distribution"><!--todo--></class>
    <class name="std::chi_squared_distribution" link="cpp/numeric/random/chi_squared_distribution"><!--todo--></class>
    <class name="std::cauchy_distribution" link="cpp/numeric/random/cauchy_distribution"><!--todo--></class>
    <class name="std::fisher_f_distribution" link="cpp/numeric/random/fisher_f_distribution"><!--todo--></class>
    <class name="std::student_t_distribution" link="cpp/numeric/random/student_t_distribution"><!--todo--></class>

    <class name="std::discrete_distribution" link="cpp/numeric/random/discrete_distribution"><!--todo--></class>
    <class name="std::piecewise_constant_distribution" link="cpp/numeric/random/piecewise_constant_distribution"><!--todo--></class>
    <class name="std::piecewise_linear_distribution" link="cpp/numeric/random/piecewise_linear_distribution"><!--todo--></class>

    <!-- cpp/numeric/ratio -->

    <class name="std::ratio" link="cpp/numeric/ratio/ratio">
        <!--todo-->
    </class>

    <typedef name="std::yocto" alias="std::ratio"/>
    <typedef name="std::femto" alias="std::ratio"/>
    <typedef name="std::pico" alias="std::ratio"/>
    <typedef name="std::nano" alias="std::ratio"/>
    <typedef name="std::micro" alias="std::ratio"/>
    <typedef name="std::milli" alias="std::ratio"/>
    <typedef name="std::centi" alias="std::ratio"/>
    <typedef name="std::deci" alias="std::ratio"/>
    <typedef name="std::deca" alias="std::ratio"/>
    <typedef name="std::hecto" alias="std::ratio"/>
    <typedef name="std::kilo" alias="std::ratio"/>
    <typedef name="std::mega" alias="std::ratio"/>
    <typedef name="std::giga" alias="std::ratio"/>
    <typedef name="std::tera" alias="std::ratio"/>
    <typedef name="std::peta" alias="std::ratio"/>
    <typedef name="std::exa" alias="std::ratio"/>
    <typedef name="std::zetta" alias="std::ratio"/>
    <typedef name="std::yotta" alias="std::ratio"/>

    <function name="std::ratio_equal" link="cpp/numeric/ratio/ratio_equal"/>
    <function name="std::ratio_not_equal" link="cpp/numeric/ratio/ratio_not_equal"/>
    <function name="std::ratio_less" link="cpp/numeric/ratio/ratio_less"/>
    <function name="std::ratio_less_equal" link="cpp/numeric/ratio/ratio_less_equal"/>
    <function name="std::ratio_greater" link="cpp/numeric/ratio/ratio_greater"/>
    <function name="std::ratio_greater_equal" link="cpp/numeric/ratio/ratio_greater_equal"/>

    <!-- cpp/algorithm -->

    <function name="std::all_of" link="cpp/algorithm/all_any_none_of"/>
    <function name="std::any_of" link="cpp/algorithm/all_any_none_of"/>
    <function name="std::none_of" link="cpp/algorithm/all_any_none_of"/>
    <function name="std::for_each" link="cpp/algorithm/for_each"/>
    <function name="std::count" link="cpp/algorithm/count"/>
    <function name="std::count_if" link="cpp/algorithm/count"/>
    <function name="std::mismatch" link="cpp/algorithm/mismatch"/>
    <function name="std::equal" link="cpp/algorithm/equal"/>
    <function name="std::find" link="cpp/algorithm/find"/>
    <function name="std::find_if" link="cpp/algorithm/find"/>
    <function name="std::find_if_not" link="cpp/algorithm/find"/>
    <function name="std::find_end" link="cpp/algorithm/find_end"/>
    <function name="std::find_first_of" link="cpp/algorithm/find_first_of"/>
    <function name="std::adjacent_find" link="cpp/algorithm/adjacent_find"/>
    <function name="std::search" link="cpp/algorithm/search"/>
    <function name="std::search_n" link="cpp/algorithm/search_n"/>

    <function name="std::copy" link="cpp/algorithm/copy"/>
    <function name="std::copy_if" link="cpp/algorithm/copy_if"/>
    <function name="std::copy_n" link="cpp/algorithm/copy_n"/>
    <function name="std::copy_backward" link="cpp/algorithm/copy_backward"/>
    <function name="std::move" link="cpp/algorithm/move"/>
    <function name="std::move_backward" link="cpp/algorithm/move_backward"/>
    <function name="std::fill" link="cpp/algorithm/fill"/>
    <function name="std::fill_n" link="cpp/algorithm/fill_n"/>
    <function name="std::transform" link="cpp/algorithm/transform"/>
    <function name="std::generate" link="cpp/algorithm/generate"/>
    <function name="std::generate_n" link="cpp/algorithm/generate_n"/>
    <function name="std::remove" link="cpp/algorithm/remove"/>
    <function name="std::remove_if" link="cpp/algorithm/remove"/>
    <function name="std::remove_copy" link="cpp/algorithm/remove_copy"/>
    <function name="std::remove_copy_if" link="cpp/algorithm/remove_copy"/>
    <function name="std::replace" link="cpp/algorithm/replace"/>
    <function name="std::replace_if" link="cpp/algorithm/replace"/>
    <function name="std::replace_copy" link="cpp/algorithm/replace_copy"/>
    <function name="std::replace_copy_if" link="cpp/algorithm/replace_copy"/>
    <function name="std::swap" link="cpp/algorithm/swap"/>
    <function name="std::swap_ranges" link="cpp/algorithm/swap_ranges"/>
    <function name="std::iter_swap" link="cpp/algorithm/iter_swap"/>
    <function name="std::reverse" link="cpp/algorithm/reverse"/>
    <function name="std::reverse_copy" link="cpp/algorithm/reverse_copy"/>
    <function name="std::rotate" link="cpp/algorithm/rotate"/>
    <function name="std::rotate_copy" link="cpp/algorithm/rotate_copy"/>
    <function name="std::random_shuffle" link="cpp/algorithm/random_shuffle"/>
    <function name="std::shuffle" link="cpp/algorithm/shuffle"/>
    <function name="std::unique" link="cpp/algorithm/unique"/>
    <function name="std::unique_copy" link="cpp/algorithm/unique_copy"/>

    <function name="std::is_partitioned" link="cpp/algorithm/is_partitioned"/>
    <function name="std::partition" link="cpp/algorithm/partition"/>
    <function name="std::partition_copy" link="cpp/algorithm/partition_copy"/>
    <function name="std::stable_partition" link="cpp/algorithm/stable_partition"/>
    <function name="std::partition_point" link="cpp/algorithm/partition_point"/>

    <function name="std::is_sorted" link="cpp/algorithm/is_sorted"/>
    <function name="std::is_sorted_until" link="cpp/algorithm/is_sorted_until"/>
    <function name="std::sort" link="cpp/algorithm/sort"/>
    <function name="std::partial_sort" link="cpp/algorithm/partial_sort"/>
    <function name="std::partial_sort_copy" link="cpp/algorithm/partial_sort_copy"/>
    <function name="std::stable_sort" link="cpp/algorithm/stable_sort"/>
    <function name="std::nht_element" link="cpp/algorithm/nth_element"/>

    <function name="std::lower_bound" link="cpp/algorithm/lower_bound"/>
    <function name="std::upper_bound" link="cpp/algorithm/upper_bound"/>
    <function name="std::binary_search" link="cpp/algorithm/binary_search"/>
    <function name="std::equal_range" link="cpp/algorithm/equal_range"/>

    <function name="std::merge" link="cpp/algorithm/merge"/>
    <function name="std::inplace_merge" link="cpp/algorithm/inplace_merge"/>
    <function name="std::includes" link="cpp/algorithm/includes"/>
    <function name="std::set_difference" link="cpp/algorithm/set_difference"/>
    <function name="std::set_intersection" link="cpp/algorithm/set_intersection"/>
    <function name="std::set_symmetric_difference" link="cpp/algorithm/set_symmetric_difference"/>
    <function name="std::set_union" link="cpp/algorithm/set_union"/>

    <function name="std::is_heap" link="cpp/algorithm/is_heap"/>
    <function name="std::is_heap_until" link="cpp/algorithm/is_heap_until"/>
    <function name="std::make_heap" link="cpp/algorithm/make_heap"/>
    <function name="std::push_heap" link="cpp/algorithm/push_heap"/>
    <function name="std::pop_heap" link="cpp/algorithm/pop_heap"/>
    <function name="std::sort_heap" link="cpp/algorithm/sort_heap"/>

    <function name="std::max" link="cpp/algorithm/max"/>
    <function name="std::max_element" link="cpp/algorithm/max_element"/>
    <function name="std::min" link="cpp/algorithm/min"/>
    <function name="std::min_element" link="cpp/algorithm/min_element"/>
    <function name="std::minmax" link="cpp/algorithm/minmax"/>
    <function name="std::minmax_element" link="cpp/algorithm/minmax_element"/>

    <function name="std::lexicographical_compare" link="cpp/algorithm/lexicographical_compare"/>
    <function name="std::is_permutation" link="cpp/algorithm/is_permutation"/>
    <function name="std::next_permutation" link="cpp/algorithm/next_permutation"/>
    <function name="std::prev_permutation" link="cpp/algorithm/prev_permutation"/>

    <function name="std::accumulate" link="cpp/algorithm/accumulate"/>
    <function name="std::inner_product" link="cpp/algorithm/inner_product"/>
    <function name="std::adjacent_difference" link="cpp/algorithm/adjacent_difference"/>
    <function name="std::partial_sum" link="cpp/algorithm/partial_sum"/>
    <function name="std::iota" link="cpp/algorithm/iota"/>

    <function name="std::qsort" link="cpp/algorithm/qsort"/>
    <function name="std::bsearch" link="cpp/algorithm/bsearch"/>

    <!-- cpp/io -->
    
    <class name="std::basic_streambuf" link="cpp/io/basic_streambuf">
        <constructor/>
        <destructor/>
        
        <function name="pubimbue"/>
        <function name="getloc"/>
        
        <function name="pubsetbuf"/>
        <function name="pubseekoff"/>
        <function name="pubseekpos"/>
        <function name="pubsync"/>
        
        <function name="in_avail"/>
        <function name="snextc"/>
        <function name="sbumpc"/>
        <function name="sgetc"/>
        <function name="sgetn"/>
        
        <function name="sputc"/>
        <function name="sputn"/>
        
        <function name="sputbackc"/>
        <function name="ungetc"/>
        
        <function name="operator="/>
        <function name="swap"/>
        
        <function name="imbue" link="pubimbue"/>
        
        <function name="setbuf" link="pubimbue"/>
        <function name="seekoff" link="pubseekoff"/>
        <function name="seekpos" link="pubseekpos"/>
        <function name="sync" link="pubsync"/>
        
        <function name="showmanyc"/>
        <function name="underflow"/>
        <function name="uflow"/>
        <function name="xsgetn" link="sgetn"/>
        <function name="gback" link="gptr"/>
        <function name="gptr" />
        <function name="egptr" link="gptr"/>
        <function name="gbump"/>
        <function name="setg"/>
        
        <function name="xsputn" link="sputn"/>
        <function name="overflow"/>
        <function name="pbase" link="pptr"/>
        <function name="pptr" />
        <function name="epptr" link="pptr"/>
        
        <function name="pbump"/>
        <function name="setp"/>
        
        <function name="pbackfail"/>
    </class>
    
    <class name="std::basic_filebuf" link="cpp/io/basic_filebuf"/>
    <class name="std::basic_stringbuf" link="cpp/io/basic_stringbuf"/>

    <class name="std::ios_base" link="cpp/io/ios_base">
        <constructor/>
        <destructor/>
        <function name="flags"/>
        <function name="setf"/>
        <function name="unsetf"/>
        <function name="precision"/>
        <function name="width"/>
        
        <function name="imbue"/>
        <function name="getloc"/>
        
        <function name="xalloc"/>
        <function name="iword"/>
        <function name="pword"/>
        
        <function name="register_callback"/>
        <function name="sync_with_stdio"/>
        
        <class name="failure">
            <inherits name="std::exception"/>
            <constructor/>
        </class>
        
        <enum name="openmode"/>
        <const name="app" link="openmode"/>
        <const name="binary" link="openmode"/>
        <const name="in" link="openmode"/>
        <const name="out" link="openmode"/>
        <const name="trunc" link="openmode"/>
        <const name="ate" link="openmode"/>
        
        <enum name="fmtflags"/>
        <const name="dec" link="fmtflags"/>
        <const name="oct" link="fmtflags"/>
        <const name="hex" link="fmtflags"/>
        <const name="basefield" link="fmtflags"/>
        <const name="left" link="fmtflags"/>
        <const name="right" link="fmtflags"/>
        <const name="internal" link="fmtflags"/>
        <const name="adjustfield" link="fmtflags"/>
        <const name="scientific" link="fmtflags"/>
        <const name="fixed" link="fmtflags"/>
        <const name="floatfield" link="fmtflags"/>
        <const name="boolalpha" link="fmtflags"/>
        <const name="showbase" link="fmtflags"/>
        <const name="showpoint" link="fmtflags"/>
        <const name="showpos" link="fmtflags"/>
        <const name="skipws" link="fmtflags"/>
        <const name="unitbuf" link="fmtflags"/>
        <const name="uppercase" link="fmtflags"/>
        
        <enum name="iostate"/>
        <const name="goodbit" link="iostate"/>
        <const name="badbit" link="iostate"/>
        <const name="failbit" link="iostate"/>
        <const name="eofbit" link="iostate"/>
        
        <enum name="seekdir"/>
        <const name="beg" link="seekdir"/>
        <const name="cur" link="seekdir"/>
        <const name="end" link="seekdir"/>
        
        <typedef name="event"/>
    </class>
    
    <class name="std::basic_ios" link="cpp/io/basic_ios">
        <inherits name="std::ios_base"/>
        <constructor/>
        <destructor/>
        
        <function name="good"/>
        <function name="eof"/>
        <function name="fail"/>
        <function name="bad"/>
        <function name="operator!"/>
        <function name="operator bool"/>
        <function name="rdstate"/>
        <function name="setstate"/>
        <function name="clear"/>
        
        <function name="copyfmt"/>
        <function name="fill"/>
        
        <function name="exceptions"/>
        <function name="imbue"/>
        <function name="rdbuf"/>
        <function name="tie"/>
        <function name="narrow"/>
        <function name="widen"/>
    </class>
    
    <class name="std::basic_istream" link="cpp/io/basic_istream">
        <inherits name="std::basic_ios"/>
        <constructor/>
        <destructor/>
        
        <function name="operator&gt;&gt;" link="operator_gtgt"/>
        <function name="get"/>
        <function name="peek"/>
        <function name="unget"/>
        <function name="putback"/>
        <function name="getline"/>
        <function name="ignore"/>
        <function name="read"/>
        <function name="readsome"/>
        <function name="gcount"/>
        
        <function name="tellg"/>
        <function name="seekg"/>
        <function name="sync"/>
        
        <class name="sentry"/>
    </class>
    
    <class name="std::basic_ostream" link="cpp/io/basic_ostream">
        <inherits name="std::basic_ios"/>
        <constructor/>
        <destructor/>
        
        <function name="operator&lt;&lt;" link="operator_ltlt"/>
        <function name="put"/>
        <function name="write"/>
        <function name="tellp"/>
        <function name="seekp"/>
        <function name="flush"/>
        
        <class name="sentry"/>
    </class>
    
    <class name="std::basic_iostream" link="cpp/io/basic_iostream">
        <inherits name="std::basic_istream"/>
        <inherits name="std::basic_ostream"/>
        <constructor/>
        <destructor/>
    </class>
    
    <class name="std::basic_ifstream" link="cpp/io/basic_ifstream">
        <inherits name="std::basic_istream"/>
        <constructor/>
        <function name="operator="/>
        <function name="swap"/>
        <function name="rdbuf"/>
        
        <function name="is_open"/>
        <function name="open"/>
        <function name="close"/>
    </class>
    
    <class name="std::basic_ofstream" link="cpp/io/basic_ofstream">
        <inherits name="std::basic_ostream"/>
        <constructor/>
        <function name="operator="/>
        <function name="swap"/>
        <function name="rdbuf"/>
        
        <function name="is_open"/>
        <function name="open"/>
        <function name="close"/>
    </class>
    
    <class name="std::basic_fstream" link="cpp/io/basic_fstream">
        <inherits name="std::basic_iostream"/>
        <constructor/>
        <function name="operator="/>
        <function name="swap"/>
        <function name="rdbuf"/>
        
        <function name="is_open"/>
        <function name="open"/>
        <function name="close"/>
    </class>
    
    <class name="std::basic_istringstream" link="cpp/io/basic_istringstream">
        <inherits name="std::basic_istream"/>
        <constructor/>
        <function name="operator="/>
        <function name="swap"/>
        <function name="rdbuf"/>
        
        <function name="str"/>
    </class>
    
    <class name="std::basic_ostringstream" link="cpp/io/basic_ostringstream">
        <inherits name="std::basic_ostream"/>
        <constructor/>
        <function name="operator="/>
        <function name="swap"/>
        <function name="rdbuf"/>
        
        <function name="str"/>
    </class>
    
    <class name="std::basic_stringstream" link="cpp/io/basic_stringstream">
        <inherits name="std::basic_iostream"/>
        <constructor/>
        <function name="operator="/>
        <function name="swap"/>
        <function name="rdbuf"/>
        
        <function name="str"/>
    </class>

    <typedef name="std::streambuf" alias="std::basic_streambuf"/>
    <typedef name="std::filebuf" alias="std::basic_filebuf"/>
    <typedef name="std::stringbuf" alias="std::basic_stringbuf"/>
    <typedef name="std::istream" alias="std::basic_istream"/>
    <typedef name="std::ostream" alias="std::basic_ostream"/>
    <typedef name="std::iostream" alias="std::basic_iostream"/>
    <typedef name="std::ifstream" alias="std::basic_ifstream"/>
    <typedef name="std::ofstream" alias="std::basic_ofstream"/>
    <typedef name="std::fstream" alias="std::basic_fstream"/>
    <typedef name="std::istringstream" alias="std::basic_istringstream"/>
    <typedef name="std::ostringstream" alias="std::basic_ostringstream"/>
    <typedef name="std::stringstream" alias="std::basic_stringstream"/>

    <typedef name="std::wstreambuf" alias="std::basic_streambuf"/>
    <typedef name="std::wfilebuf" alias="std::basic_filebuf"/>
    <typedef name="std::wstringbuf" alias="std::basic_stringbuf"/>
    <typedef name="std::wistream" alias="std::basic_istream"/>
    <typedef name="std::wostream" alias="std::basic_ostream"/>
    <typedef name="std::wiostream" alias="std::basic_iostream"/>
    <typedef name="std::wifstream" alias="std::basic_ifstream"/>
    <typedef name="std::wofstream" alias="std::basic_ofstream"/>
    <typedef name="std::wfstream" alias="std::basic_fstream"/>
    <typedef name="std::wistringstream" alias="std::basic_istringstream"/>
    <typedef name="std::wostringstream" alias="std::basic_ostringstream"/>
    <typedef name="std::wstringstream" alias="std::basic_stringstream"/>

    <!-- class doesn't fit here, but whatever -->
    <class name="std::cin" link="cpp/io/basic_istream"/>
    <class name="std::wcin" link="cpp/io/basic_istream"/>
    <class name="std::cout" link="cpp/io/basic_ostream"/>
    <class name="std::wcout" link="cpp/io/basic_ostream"/>
    <class name="std::cerr" link="cpp/io/basic_ostream"/>
    <class name="std::wcerr" link="cpp/io/basic_ostream"/>
    <class name="std::clog" link="cpp/io/basic_ostream"/>
    <class name="std::wclog" link="cpp/io/basic_ostream"/>

    <!-- cpp/io/c -->

    <function name="std::fopen" link="cpp/io/c/fopen"/>
    <function name="std::freopen" link="cpp/io/c/freopen"/>
    <function name="std::fflush" link="cpp/io/c/fflush"/>
    <function name="std::fclose" link="cpp/io/c/fclose"/>
    <function name="std::setbuf" link="cpp/io/c/setbuf"/>
    <function name="std::setvbuf" link="cpp/io/c/setvbuf"/>
    <function name="std::fread" link="cpp/io/c/fread"/>
    <function name="std::fwrite" link="cpp/io/c/fwrite"/>
    <function name="std::fgetc" link="cpp/io/c/fgetc"/>
    <function name="std::getc" link="cpp/io/c/fgetc"/>
    <function name="std::fgets" link="cpp/io/c/fgets"/>
    <function name="std::fputc" link="cpp/io/c/fputc"/>
    <function name="std::putc" link="cpp/io/c/fputc"/>
    <function name="std::fputs" link="cpp/io/c/fputs"/>
    <function name="std::getchar" link="cpp/io/c/getchar"/>
    <function name="std::gets" link="cpp/io/c/gets"/>
    <function name="std::putchar" link="cpp/io/c/putchar"/>
    <function name="std::puts" link="cpp/io/c/puts"/>
    <function name="std::ungetc" link="cpp/io/c/ungetc"/>
    <function name="std::fgetwc" link="cpp/io/c/fgetwc"/>
    <function name="std::fgetss" link="cpp/io/c/fgetws"/>
    <function name="std::fputwc" link="cpp/io/c/fputwc"/>
    <function name="std::fputws" link="cpp/io/c/fputws"/>
    <function name="std::getwchar" link="cpp/io/c/getwchar"/>
    <function name="std::putwchar" link="cpp/io/c/putwchar"/>
    <function name="std::ungetwc" link="cpp/io/c/ungetwc"/>
    <function name="std::scanf" link="cpp/io/c/fscanf"/>
    <function name="std::fscanf" link="cpp/io/c/fscanf"/>
    <function name="std::sscanf" link="cpp/io/c/fscanf"/>
    <function name="std::vscanf" link="cpp/io/c/vfscanf"/>
    <function name="std::vfscanf" link="cpp/io/c/vfscanf"/>
    <function name="std::vsscanf" link="cpp/io/c/vfscanf"/>
    <function name="std::printf" link="cpp/io/c/fprintf"/>
    <function name="std::fprintf" link="cpp/io/c/fprintf"/>
    <function name="std::sprintf" link="cpp/io/c/fprintf"/>
    <function name="std::snprintf" link="cpp/io/c/fprintf"/>
    <function name="std::vprintf" link="cpp/io/c/vfprintf"/>
    <function name="std::vfprintf" link="cpp/io/c/vfprintf"/>
    <function name="std::vsprintf" link="cpp/io/c/vfprintf"/>
    <function name="std::vsnprintf" link="cpp/io/c/vfprintf"/>
    <function name="std::wscanf" link="cpp/io/c/fwscanf"/>
    <function name="std::fwscanf" link="cpp/io/c/fwscanf"/>
    <function name="std::swscanf" link="cpp/io/c/fwscanf"/>
    <function name="std::vwscanf" link="cpp/io/c/vfwscanf"/>
    <function name="std::vfwscanf" link="cpp/io/c/vfwscanf"/>
    <function name="std::vswscanf" link="cpp/io/c/vfwscanf"/>
    <function name="std::wprintf" link="cpp/io/c/fwprintf"/>
    <function name="std::fwprintf" link="cpp/io/c/fwprintf"/>
    <function name="std::swprintf" link="cpp/io/c/fwprintf"/>
    <function name="std::vwprintf" link="cpp/io/c/vfwprintf"/>
    <function name="std::vfwprintf" link="cpp/io/c/vfwprintf"/>
    <function name="std::vswprintf" link="cpp/io/c/vfwprintf"/>
    <function name="std::ftell" link="cpp/io/c/ftell"/>
    <function name="std::fgetpos" link="cpp/io/c/fgetpos"/>
    <function name="std::fseek" link="cpp/io/c/fseek"/>
    <function name="std::fsetpos" link="cpp/io/c/fsetpos"/>
    <function name="std::rewind" link="cpp/io/c/rewind"/>
    <function name="std::clearerr" link="cpp/io/c/clearerr"/>
    <function name="std::feof" link="cpp/io/c/feof"/>
    <function name="std::ferror" link="cpp/io/c/ferror"/>
    <function name="std::perror" link="cpp/io/c/perror"/>
    <function name="std::remove" link="cpp/io/c/remove"/>
    <function name="std::rename" link="cpp/io/c/rename"/>
    <function name="std::tmpfile" link="cpp/io/c/tmpfile"/>
    <function name="std::tmpnam" link="cpp/io/c/tmpnam"/>

    <!-- cpp/locale -->

    <function name="std::setlocale" link="cpp/locale/setlocale"/>
    <function name="std::localeconv" link="cpp/locale/localeconv"/>
    <class name="std::lconv" link="cpp/locale/lconv"/>

    <class name="std::locale" link="cpp/locale/locale">
        <constructor/>
        <destructor/>
        
        <function name="operator="/>
        <function name="combine"/>
        <function name="name"/>
        <function name="operator==" link="operator_cmp"/>
        <function name="operator!=" link="operator_cmp"/>
        <function name="operator()"/>
        
        <function name="global"/>
        <function name="classic"/>
    </class>
    
    <class name="std::locale::id" link="cpp/locale/locale/id">
        <constructor/>
    </class>
    
    <class name="std::locale::facet" link="cpp/locale/locale/facet">
        <constructor/>
    </class>
    
    <!-- cpp/regex -->
    
    <class name="std::basic_regex" link="cpp/regex/basic_regex">
        <constructor/>
        <destructor/>
        <function name="operator="/>
        <function name="assign"/>
        
        <function name="mark_count"/>
        <function name="flags"/>
        
        <function name="getloc"/>
        <function name="imbue"/>
        
        <function name="swap"/>
    </class>
    
    <typedef name="std::regex" alias="std::basic_regex"/>
    <typedef name="std::wregex" alias="std::basic_regex"/>
    
    <class name="std::sub_match" link="cpp/regex/sub_match">
        <constructor/>
        <function name="length"/>
        <function name="str"/>
        <function name="operator string_type" link="str"/>
        <function name="compare"/>
    </class>
    
    <typedef name="std::csub_match" alias="std::sub_match"/>
    <typedef name="std::wcsub_match" alias="std::sub_match"/>
    <typedef name="std::ssub_match" alias="std::sub_match"/>
    <typedef name="std::wssub_match" alias="std::sub_match"/>

    <class name="std::match_results" link="cpp/regex/match_results">
        <constructor/>
        <destructor/>
        <function name="get_allocator"/>
        
        <function name="ready"/>
        
        <function name="empty"/>
        <function name="size"/>
        <function name="max_size"/>
        
        <function name="length"/>
        <function name="position"/>
        <function name="str"/>
        <function name="operator[]" link="operator_at"/>
        <function name="prefix"/>
        <function name="suffix"/>
        
        <function name="begin"/>
        <function name="cbegin" link="begin"/>
        <function name="end"/>
        <function name="cend"/>
        
        <function name="format"/>
        <function name="swap"/>
    </class>
    
    <typedef name="std::cmatch" alias="std::match_results"/>
    <typedef name="std::wcmatch" alias="std::match_results"/>
    <typedef name="std::smatch" alias="std::match_results"/>
    <typedef name="std::wsmatch" alias="std::match_results"/>
    
    <function name="std::regex_match" link="cpp/regex/regex_match"/>
    <function name="std::regex_search" link="cpp/regex/regex_search"/>
    <function name="std::regex_replace" link="cpp/regex/regex_replace"/>
    
    <class name="std::regex_iterator" link="cpp/regex/regex_iterator">
        <!-- todo -->
    </class>
    
    <typedef name="std::cregex_iterator" alias="std::regex_iterator"/>
    <typedef name="std::wcregex_iterator" alias="std::regex_iterator"/>
    <typedef name="std::sregex_iterator" alias="std::regex_iterator"/>
    <typedef name="std::wsregex_iterator" alias="std::regex_iterator"/>
    
    <class name="std::regex_token_iterator" link="cpp/regex/regex_token_iterator">
        <!-- todo -->
    </class>
    
    <typedef name="std::cregex_token_iterator" alias="std::regex_token_iterator"/>
    <typedef name="std::wcregex_token_iterator" alias="std::regex_token_iterator"/>
    <typedef name="std::sregex_token_iterator" alias="std::regex_token_iterator"/>
    <typedef name="std::wsregex_token_iterator" alias="std::regex_token_iterator"/>
    
    <class name="std::regex_error" link="cpp/regex_error">
        <inherits name="std::runtime_error"/>
        <constructor/>
        <function name="code"/>
    </class>
    
    <class name="std::regex_traits" link="cpp/regex/regex_traits">
        <!-- todo -->
    </class>
    
    <enum name="std::regex_constants::syntax_option_type" link="cpp/regex/syntax_option_type"/>
    <const name="std::regex_constants::icase" link="cpp/regex/syntax_option_type"/>
    <const name="std::regex_constants::nosubs" link="cpp/regex/syntax_option_type"/>
    <const name="std::regex_constants::optimize" link="cpp/regex/syntax_option_type"/>
    <const name="std::regex_constants::collate" link="cpp/regex/syntax_option_type"/>
    <const name="std::regex_constants::ECMAScript" link="cpp/regex/syntax_option_type"/>
    <const name="std::regex_constants::basic" link="cpp/regex/syntax_option_type"/>
    <const name="std::regex_constants::extended" link="cpp/regex/syntax_option_type"/>
    <const name="std::regex_constants::awk" link="cpp/regex/syntax_option_type"/>
    <const name="std::regex_constants::grep" link="cpp/regex/syntax_option_type"/>
    <const name="std::regex_constants::egrep" link="cpp/regex/syntax_option_type"/>

    <enum name="std::regex_constants::match_flag_type" link="cpp/regex/match_flag_type"/>
    <const name="std::regex_constants::match_default" link="cpp/regex/match_flag_type"/>
    <const name="std::regex_constants::match_not_bol" link="cpp/regex/match_flag_type"/>
    <const name="std::regex_constants::match_not_eol" link="cpp/regex/match_flag_type"/>
    <const name="std::regex_constants::match_not_bow" link="cpp/regex/match_flag_type"/>
    <const name="std::regex_constants::match_not_eow" link="cpp/regex/match_flag_type"/>
    <const name="std::regex_constants::match_any" link="cpp/regex/match_flag_type"/>
    <const name="std::regex_constants::match_not_null" link="cpp/regex/match_flag_type"/>
    <const name="std::regex_constants::match_continuous" link="cpp/regex/match_flag_type"/>
    <const name="std::regex_constants::match_prev_avail" link="cpp/regex/match_flag_type"/>
    <const name="std::regex_constants::format_default" link="cpp/regex/match_flag_type"/>
    <const name="std::regex_constants::format_sed" link="cpp/regex/match_flag_type"/>
    <const name="std::regex_constants::format_no_copy" link="cpp/regex/match_flag_type"/>
    <const name="std::regex_constants::format_first_only" link="cpp/regex/match_flag_type"/>
    
    <enum name="std::regex_constants::error_type" link="cpp/regex/error_type"/>
    <enum name="std::regex_constants::error_collate" link="cpp/regex/error_type"/>
    <enum name="std::regex_constants::error_ctype" link="cpp/regex/error_type"/>
    <enum name="std::regex_constants::error_escape" link="cpp/regex/error_type"/>
    <enum name="std::regex_constants::error_backref" link="cpp/regex/error_type"/>
    <enum name="std::regex_constants::error_brack" link="cpp/regex/error_type"/>
    <enum name="std::regex_constants::error_paren" link="cpp/regex/error_type"/>
    <enum name="std::regex_constants::error_brace" link="cpp/regex/error_type"/>
    <enum name="std::regex_constants::error_badbrace" link="cpp/regex/error_type"/>
    <enum name="std::regex_constants::error_range" link="cpp/regex/error_type"/>
    <enum name="std::regex_constants::error_space" link="cpp/regex/error_type"/>
    <enum name="std::regex_constants::error_badrepeat" link="cpp/regex/error_type"/>
    <enum name="std::regex_constants::error_complexity" link="cpp/regex/error_type"/>
    <enum name="std::regex_constants::error_stack" link="cpp/regex/error_type"/>

    <!-- cpp/atomic -->
    
    <class name="std::atomic" link="cpp/atomic/atomic">
        <!-- todo -->
    </class>
    
    <function name="std::atomic_is_lock_free" link="cpp/atomic/atomic_is_lock_free"/>
    
    <function name="std::atomic_store" link="cpp/atomic/atomic_store"/>
    <function name="std::atomic_store_explicit" link="cpp/atomic/atomic_store"/>

    <function name="std::atomic_load" link="cpp/atomic/atomic_load"/>
    <function name="std::atomic_load_explicit" link="cpp/atomic/atomic_load"/>

    <function name="std::atomic_exchange" link="cpp/atomic/atomic_exchange"/>
    <function name="std::atomic_exchange_explicit" link="cpp/atomic/atomic_exchange"/>

    <function name="std::atomic_compare_exchange_weak" link="cpp/atomic/atomic_compare_exchange"/>
    <function name="std::atomic_compare_exchange_weak_explicit" link="cpp/atomic/atomic_compare_exchange"/>
    <function name="std::atomic_compare_exchange_strong" link="cpp/atomic/atomic_compare_exchange"/>
    <function name="std::atomic_compare_exchange_strong_explicit" link="cpp/atomic/atomic_compare_exchange"/>

    <function name="std::atomic_fetch_add" link="cpp/atomic/atomic_fetch_add"/>
    <function name="std::atomic_fetch_add_explicit" link="cpp/atomic/atomic_fetch_add"/>

    <function name="std::atomic_fetch_sub" link="cpp/atomic/atomic_fetch_add"/>
    <function name="std::atomic_fetch_sub_explicit" link="cpp/atomic/atomic_fetch_add"/>

    <function name="std::atomic_fetch_and" link="cpp/atomic/atomic_fetch_sub"/>
    <function name="std::atomic_fetch_and_explicit" link="cpp/atomic/atomic_fetch_sub"/>

    <function name="std::atomic_fetch_or" link="cpp/atomic/atomic_fetch_add"/>
    <function name="std::atomic_fetch_or_explicit" link="cpp/atomic/atomic_fetch_add"/>

    <function name="std::atomic_fetch_xor" link="cpp/atomic/atomic_fetch_add"/>
    <function name="std::atomic_fetch_xor_explicit" link="cpp/atomic/atomic_fetch_add"/>

    <class name="std::atomic_flag" link="cpp/atomic/atomic_flag">
        <constructor/>
        <function name="operator="/>
        <function name="clear"/>
        <function name="test_and_set"/>
    </class>
    
    <function name="std::atomic_init" link="cpp/atomic/atomic_init"/>
    <function name="ATOMIC_VAR_INIT" link="cpp/atomic/ATOMIC_VAR_INIT"/>
    <enum name="ATOMIC_FLAG_INIT" link="cpp/atomic/ATOMIC_FLAG_INIT"/>
    
    <enum name="std::memory_order" link="cpp/atomic/memory_order"/>
    <const name="std::memory_order_relaxed" link="cpp/atomic/memory_order"/>
    <const name="std::memory_order_consume" link="cpp/atomic/memory_order"/>
    <const name="std::memory_order_acquire" link="cpp/atomic/memory_order"/>
    <const name="std::memory_order_release" link="cpp/atomic/memory_order"/>
    <const name="std::memory_order_acq_rel" link="cpp/atomic/memory_order"/>
    <const name="std::memory_order_seq_cst" link="cpp/atomic/memory_order"/>
    
    <function name="std::kill_dependency" link="cpp/atomic/kill_dependency"/>
    <function name="std::atomic_thread_fence" link="cpp/atomic/atomic_thread_fence"/>
    <function name="std::atomic_signal_fence" link="cpp/atomic/atomic_signal_fence"/>
    
    <!-- cpp/thread -->

    <class name="std::thread" link="cpp/thread/thread">
        <constructor/>
        <destructor/>
        <function name="operator="/>
        
        <function name="joinable"/>
        <function name="get_id"/>
        <function name="native_handle"/>
        <function name="hardware_concurrency"/>
        
        <function name="join"/>
        <function name="detach"/>
        <function name="swap"/>
    </class>
    
    <class name="std::thread::id" link="cpp/thread/thread/id">
        <constructor/>
        <!--todo-->
    </class>

    <function name="std::this_thread::get_id" link="cpp/thread/get_id"/>
    <function name="std::this_thread::sleep_for" link="cpp/thread/sleep_for"/>
    <function name="std::this_thread::sleep_until" link="cpp/thread/sleep_until"/>
    <function name="std::this_thread::yield" link="cpp/thread/yield"/>

    <class name="std::mutex" link="cpp/thread/mutex">
        <constructor/>
        <function name="lock"/>
        <function name="try_lock"/>
        <function name="unlock"/>
        <function name="native_handle"/>
    </class>
    
    <class name="std::recursive_mutex" link="cpp/thread/recursive_mutex">
        <constructor/>
        <function name="lock"/>
        <function name="try_lock"/>
        <function name="unlock"/>
        <function name="native_handle"/>
    </class>
    
    <class name="std::timed_mutex" link="cpp/thread/timed_mutex">
        <constructor/>
        <function name="lock"/>
        <function name="try_lock"/>
        <function name="try_lock_for"/>
        <function name="try_lock_until"/>
        <function name="unlock"/>
        <function name="native_handle"/>
    </class>
    
    <class name="std::recursive_timed_mutex" link="cpp/thread/recursive_timed_mutex">
        <constructor/>
        <function name="lock"/>
        <function name="try_lock"/>
        <function name="try_lock_for"/>
        <function name="try_lock_until"/>
        <function name="unlock"/>
        <function name="native_handle"/>
    </class>

    <class name="std::lock_guard" link="cpp/thread/lock_guard">
        <constructor/>
        <destructor/>
    </class>
    
    <class name="std::unique_lock" link="cpp/thread/unique_lock">
        <constructor/>
        <destructor/>
        <function name="operator="/>
        
        <function name="lock"/>
        <function name="try_lock"/>
        <function name="try_lock_for"/>
        <function name="try_lock_until"/>
        <function name="unlock"/>
        
        <function name="swap"/>
        <function name="release"/>
        
        <function name="mutex"/>
        <function name="owns_lock"/>
        <function name="operator bool"/>
    </class>
    
    <function name="std::lock" link="cpp/thread/lock"/>
    <function name="std::try_lock" link="cpp/thread/try_lock"/>

    <class name="std::condition_variable" link="cpp/thread/condition_variable">
        <constructor/>
        <destructor/>
        
        <function name="notify_one"/>
        <function name="notify_all"/>
        
        <function name="wait"/>
        <function name="wait_for"/>
        <function name="wait_until"/>
        
        <function name="native_handle"/>
    </class>
    
    <class name="std::condition_variable_any" link="cpp/thread/condition_variable_any">
        <constructor/>
        <destructor/>
        
        <function name="notify_one"/>
        <function name="notify_all"/>
        
        <function name="wait"/>
        <function name="wait_for"/>
        <function name="wait_until"/>
        
        <function name="native_handle"/>
    </class>
    
    <function name="std::notify_all_at_thread_exit" link="cpp/thread/notify_all_at_thread_exit"/>

    <class name="std::once_flag" link="cpp/thread/once_flag"/>
    <function name="std::call_once" link="cpp/thread/call_once"/>
    
    <enum name="std::cv_status" link="cpp/thread/cv_status">
        <const name="no_timeout"/>
        <const name="timeout"/>
    </enum>
    
    <class name="std::promise" link="cpp/thread/promise">
        <constructor/>
        <destructor/>
        <function name="operator="/>
        <function name="swap"/>
        <function name="get_future"/>
        <function name="set_value"/>
        <function name="set_value_at_thread_exit"/>
        <function name="set_exception"/>
        <function name="set_exception_at_thread_exit"/>
    </class>
    
    <class name="std::future" link="cpp/thread/future">
        <constructor/>
        <destructor/>
        <function name="operator="/>
        <function name="share"/>
        <function name="get"/>
        
        <function name="valid"/>
        <function name="wait"/>
        <function name="wait_for"/>
        <function name="wait_until"/>
    </class>
    
    <class name="std::shared_future" link="cpp/thread/shared_future">
        <constructor/>
        <destructor/>
        <function name="operator="/>
        <function name="get"/>
        
        <function name="valid"/>
        <function name="wait"/>
        <function name="wait_for"/>
        <function name="wait_until"/>
    </class>
    
    <function name="std::future_category" link="cpp/thread/future/future_category"/>
    
    <class name="std::packaged_task" link="cpp/thread/packaged_task">
        <constructor/>
        <destructor/>
        <function name="operator="/>
        <function name="valid"/>
        <function name="swap"/>
        
        <function name="get_future"/>
        <function name="operator()"/>
        <function name="make_ready_at_thread_exit"/>
        <function name="reset"/>
    </class>
    
    <function name="std::async" link="cpp/thread/async"/>
    
</index>
